import requests as rq
import functions as fn
import regex as re

#1
def nucleotide_count(string):
    a, c, g, t, u = 0, 0, 0, 0, 0
    for i in string:
        if i == 'A': a +=1
        elif i == 'C': c +=1
        elif i == 'G': g +=1
        elif i == 'T': t +=1
        elif i == 'U': u +=1
    return a, c, g, t, u

#2
def dna_torna_direct(s):
    f = s
    return f.replace('T', 'U')

#3
dna = 'AGAGGCGTGTGTTTTCCGCGCTTGCATTCTCCAACGCTCGACTAGCAATCGCAGCGAATCGATGGAAACGTTCTACTCGGGGCGTATGCCGCCTACATCCAGACGAAGCAACACTGCTTTTGGTTGGCACCAAGTTTCTGTTATTATACTCTTCCTGAACACCCCACGGTCTTCACGCGGATGCGAACCGAAGCCCTTCTCTCAGTTAAGGTGGCCATATGCTGTGCGGAAGACGGAGAAAAGGTCGCAAAGCAATTGATCTACTCGACCCCATTGGAACCATTATAAACGCAGCAAAGGTCTCCACGCAGGAGGGTTTATAGACGGCTCAGCGGCGATCTACACGGTGGTAAGACAAACATACCATTATACAAAGATTGACGAGGTTCTAGGCAGCCCTCGTTCCTATTCCCCAAGCAGGTCAATTTCCTCAGGCGGCTTATATTGCTGACTTCCTTTGGGATTGCCGGTCCGGGGCAGGCTTTGAGGACGATAAAGGCAACGCGCGCGTCACTAAGTGCATTCGTACATGTGAAAATTCCTGGCGTGTTTACGTTCATCTTCTTCTGATAGCACGGTTGCGTTCCCTTCCCAGTTTTAGCTTTCGAAGCATACTCACGGCAAAGCTAGCCCGACTCAAGCGTATCCCGTGGCGCGCAGGAGTCATGCGCACCTGTTAGTCACAGTAGTAGCCCTACTCAGAGGCTAGCAACGAGATGTAGTTATTGTGCAAGTGTTTCTTCCCACTACAACTGCCTTCATGCAGCATAGTGATACATCAAGTAGCTATAACATCGATTGAACCCCTACTACTCACATGAATCTTCAATTTC'
def rc(dna):
    for i in reversed(dna):
        rna = ''
        if i == 'A':
            rna += 'T'
        elif i == 'C':
            rna += 'G'
        elif i == 'G':
            rna += 'C'
        elif i == 'T':
            rna += 'A'
    return rna

#4 Fibbonacci Rabbits
def fib(n, k):
    if n <= 2:
        return 1
    elif n ==3:
        return 1+k
    else:
        return num + (fib(n-2, k)*k) + fib(n-1, k)

# 5 Mortal Fibbonacci Rabbits - incorrect
n = 0
m = 0
x = 0
num = 0
def mortal_rabs(n, m):
    global x
    x += 1
    print(round(x,0))
    if n < 0:
        return 0
    elif n <= 2:
        return 1
    else: 
        return num + mortal_rabs(n-2, m)+mortal_rabs(n-1, m)-mortal_rabs(n-(m+1), m)

#5 Mortal Fibbonnacci Rabbits v2 (kinda maybe sorta got this from chatgpt)
def dyingrabs(n, m):
    global x
    x=0
    if n <= 2:
        return 1
    
    dp = [1] * (n+1)
    dp[1] = 1
    dp[2] = 1

    for i in range(3, n+1):
        if i <=m:
            x+=2
            dp[i] = dp[i-1]+dp[i-2]
        else:
            x+=3
            dp[i] = dp[i-1]+dp[i-2]-dp[i-m-1]
    
    return dp[n]

#6 Mendel Probability
# k - homozygous Dominant
# m - heterozygous
# n - homozygous recessive
def mendel_prob(k, m, n):
    t = k+m+n
    Dxhet = (k/t)*(m/(t-1))*2 # Dominant and Heterozygous
    DxR = (k/t)*(n/(t-1))*2 # Dominant and Recessive
    Rxhet = (n/t)*(m/(t-1))*2*0.5 # Recessive and Heterozygous
    DxD = (k/t)*((k-1)/(t-1)) # Dominant and Dominant
    RxR = (n/t)*((n-1)/(t-1)) # Recessive and Recessive
    hetxhet = (m/t)*((m-1)/(t-1))*0.75 # Heterozzygous and Heterozygous
    return Dxhet+DxR+Rxhet+DxD+hetxhet

def mendel_inv_prob(k,m,n):
    t = k+m+n
    RxR = (n/t)*((n-1)/(t-1)) # Recessive and Recessive
    Rxhet = (n/t)*(m/(t-1))*2*0.5 # Recessive and Heterozygous
    hetxhet = (m/t)*((m-1)/(t-1))*0.25 # Heterozzygous and Heterozygous
    return 1-(RxR+Rxhet+hetxhet)

#7 Translating RNA - Didn't work
dict = {
    'UUU': 'F','CUU': 'L','AUU': 'I','GUU': 'V',
    'UUC': 'F','CUC': 'L','AUC': 'I','GUC': 'V',
    'UUA': 'L','CUA': 'L','AUA': 'I','GUA': 'V',
    'UUG': 'L','CUG': 'L','AUG': 'M','GUG': 'V',
    'UCU': 'S','CCU': 'P','ACU': 'T','GCU': 'A',
    'UCC': 'S','CCC': 'P','ACC': 'T','GCC': 'A',
    'UCA': 'S','CCA': 'P','ACA': 'T','GCA': 'A',
    'UCG': 'S','CCG': 'P','ACG': 'T','GCG': 'A',
    'UAU': 'Y','CAU': 'H','AAU': 'N','GAU': 'D',
    'UAC': 'Y','CAC': 'H','AAC': 'N','GAC': 'D',
    'UAA': 'Stop','CAA': 'Q','AAA': 'K','GAA': 'E',
    'UAG': 'Stop','CAG': 'Q','AAG': 'K','GAG': 'E',
    'UGU': 'C','CGU': 'R','AGU': 'S','GGU': 'G',
    'UGC': 'C','CGC': 'R','AGC': 'S','GGC': 'G',
    'UGA': 'Stop','CGA': 'R','AGA': 'R','GGA': 'G',
    'UGG': 'W','CGG': 'R','AGG': 'R','GGG': 'G', 
}

def rna_to_prot_1():
    f = 'AUGUUUUUCAAGACAAGAAAAGCUCCUGCGUCAUACUGUUUAUAUGAGAAUCAAGACCUUCGUUGGCAUGUACGAGAGGGGCUUUUGGUAGAUCCCGUACUGCCUUCGAGAAACUCGGAAGUCAGCUCCACACAUAGAGAUAUCCUUCGCGCUUCGGGGCCCCUUCGGCUCAUACGGUCGAGCGUACCCUCUAGGGUGCAAAUGGCUGGAAAGUGGGUAAGAGCACCUUCAUACAGUCAGUUCGGCUUGUUGUUUCACGACGCUCCCAAGUUUCUGCGUCCACUGUCUGCAAGUGUCGACACCUCGUUGCCCCUUGUGCGAUUCGAAAUACGUCAAACCGUUAUUUUCGAGUCUUGUGCGAUCAGGUCUGCCCAGAAAACUGAUAGUUUGAAUCAACUGCAAAAGGAAGUCCCUCAUGAGCUGACAAACAAAGCCGAAAAAAGACAAGAUGUAGAAGAUGACGAGGAUAGAGUUCGGAAGCCUCAUUCCACUUUUUCUCGAUUUCUCGACUCUGGAAUUAACAGCGGUAGCCGGGUUCCAAUCCCCGUUAUUGUAGUGACGGCUAAUCAACAGCAGUACUCGAAUAGUCAUUCGGAGCUGACAUGGAGUCUUCCAGAUUGCACCCACGUAAUAGACCCACCUCCGGCGCCGGUUACCCAGCAUAAAGAUCACCUGCCAAGGGGAGCAAGAACCCAACAAGAAGCCUACGUAAACCACGCAGACUCCCGGCACCAUGAAACAAUUGGAGUUGGCAGAUUAGGAUCGCGGGGACGCAGCUUGCUCGAAGAACUGUGCUCCCUCAGUCUUGUGCUCCUGAAACAUUAUUGCGAACUCACAGUGCUGUCCAUACAAAAUGACGUGAUAACGGCCCUCUCAGGAAGACGCCGAAUUCGGAAAUUGGAGGCCCAGCGGGAAAACUCUUCAACCAGUAAGACACACGACCUGGGCAAUAACGCACAUCGGAUUUACCGUGUGUGCGAUGCCUCAAUAACUGGUGUCGCGCCUGGCCGUCAUGUUGACACCAGUCGUCCAAAUCAGGUCGGGAAUGUAGAACUUGUCUUGGGGUGCCCGGAAAGGUCGUCUCAAUACGUUUUCUUACUUAGAUCAUCAUUUAACGCCGAUGGCCUGUACGAAACAUCGUCCAACGUGGAGCAACCGCCCUACGUAACUACCGGGUACGUUGUACCAUCAAGUAAGUUUUCUAUAAUAAGUAAAGAUAAACGCCCAUUAUUAACACCGUUACGGAUACACCAAGUCUGUCGGCUGUUCUCAGGUCUGCUCCCGGUGAAAGAAGACCUAACAGACAGGGUCAUUACUACUGCUUGUACGACUGCAGAACCCAAAAUUGUCUUGCCAGUAAUUAUCACUCGUGCUUCGGAAGCAUAUGGCUGUAUAACCCCGAAACUGUACCGUUAUCCUAUGUGGACAGCCAACAUCAGGCUAACAAUGAACAUAUAUGAAGACUUAUCAUGGAUUGCUCGCAUCGCCUUACAACGGAUAGAUGUUGCUCGCGUGGGGACACGAACCACACGGAUUCGUGCCCCCAGUCUCUUACGAAACGCUGAUGGAAGUACCACCAUAUGGCCCAAUGAAAUCUUUGGGUUUCGGCGCAUAGCCCCGGGUUUGGCCGCCAGUUGGAGGGAACGAGAGGGCGGUCUAGGCUGUAUUUGUCGAGACAGUUCCCUGUUGUGGUCUUCAAUGCGAGAGCUAAGAGCUGUCGCCUGCUUCCGGGUCCGCACAGGGAUCUGGGCGGAUCGGUGUACGCGAAGCAUCAAUAGGGAUGGAAAUCAAAGCGUUGUAGGUGCCUUUCAUAUCUACAAGCUCAGGGUAAGAUGUCGAUGCAAGUAUAACGUACUGCAGAGCCAGUUAGUCAAUAAGGUCUCUUGGCGGCAUCGGACGAGAAAUACAUACGUUAAAAUCUUCCGAGGGGCCCUCUUCACACGCCAUAGGCAUACCACCGCCGCCCCAACGGUCGGAUUAAGCUCUACCAUUUCGGGAGUAACAAGACAACCUCAUGAACGAAGCAGCAAGGCGUACUCAGCGGUCGUGGACGGCCCUCUCAGGGGCAGAUGCAGUACACGCGCUCAUCUUCUGGAUUAUCAAGUAGAGAUCGGACGGAUUUAUUGGCAGGAAGAACCUCUUCUCCGCCGUCUGCUUGUAACCCUUACUAUGGCAUGUGAGGACGUAAGCCGCACCAAAAGGGCUCGUGGCAACUGUCCCUGCUCUAAAAUGCCACAGUGCACAAGCCCCCCCGCCGCAGUAAUUUCACACUUGAAGAGAGUAAGCAUGUUCACCCACAAGGCACACGCGUCACGCACCUUUAUACGAGACUCAAUUUUGGGCUCGGCUCGGGGUAAGACCACGGACUCACGCGGGUCAACUUUAUAUCGCCCGGAGCAGCAUGUGGAGCGGAGUGGUACGUGGUCAUAUUUUUUAUUCGACUGGUUUCGUGACUUGCGCAAGAACUUACGUCGUACGUUGCGCACUGAGAGAAGAUUUCUUAUCACUCGAUUGGUGCCGAGUUCGCAAGACGUUCCUCAAUGGGAAAACCACUACUCGUUGCCCACGAUUGCUCGGUGGUCUUGGUACCUCUGCAUUGGACGCACCAAUGCCACUCGGCCGGCACAGUUGCCAGCAUCGCAUCGAUACAUUUGUUUUAAAGUCAACGCUCAUCGAAUGUUAUGGGCAUGUAUACACGGUCAACAAUCUCGCACUGUGACGUCACUCCAUGAGUCACUGAACCUUGGAUCCCUCGUAAAGGCUGCACCGGCGCGGUCAACUACGUUCUUCCCGGCGGUCAUGCCCGCAGGGGGAAGUGCCGACUUGCGUGUAUUGCGACUUCCGAGACGACCAGUUCAGACACCGGGGGAUACUUCCGGCGGUUACCUUCAGACUGCGUCUUCGCCUCUGCUCUGGAAGGGUGACGAACGGCUGAGACUCUGUGUGAACUUUAGUGGCGUGACCAUUUGCGAAAAGGGAUCAGCAUCCAGCAAGGUAGCGCCAAGGGAAAGGCCCGCUAUUGCCGGAGUUCGAACGCGUUUUGGAAACCCCCUGACGCAUGACGAUGAGAGUACGAGACUCAGUCCUUAUACAAUGAGCUACUCUAAAUCCUCAGGUGGCCUAUUUACUAAUUUCGGAACGCAAUGGACGGCACUCGAAAGGGAAAGUACGCUUUGUGCUGAAGUGCUGUUAACACUCUGUCGCCUGAGGUUAUGUUAUUUACUUGAAACACCCGCCAUCCAGAAAGCAGACAUUUUAUUUGAGUGCACGAACCCCCGACGAGCCCGUCCAAUGGGACAUGUCACCCGGGGCCAGACGGGCGAGCCUGACAGCGAGCUCAACAUCCUAGGCACCUGCGGGAUGGUCUCCCACUGCAAUGGGUGGACCGAUGGUCCUAAAAGGAUUCUUGAUAACGCGGAACUGUGCCAUUGCGAAUACCCCACCAAGGGGGGUGCACCUCGCCAUAACGCCCUAAAUAAUAAUCUAAAUGUGGGGUCAGUUCUCCAUAAAUCGGGUCUCAAUAAAUCGUCAGCGUCGGCCUCCCGAUUUUGUACUUAUAACCAGUCAUGGCGAAGUUUCUGUUCGUCACGGAGGUCUCGCAUUUCAGAUGAAAUUUCAUCUUUGCAUGUCACAAUGGAUCGGUGUCAUCGAAAUCAUGCAGUGACAAUGGCUGAUCCUGCGCAACCCAGGAAAAGUUUGUUACAACAUGUUCACAGAGGGCCGGGGACUGGCAGUCUCACGCAGCUGGUAAAGAAUGCCGUGCUCUGCCAAGACGUGAACCUACUAACCCGCUCUUCGCACUCUAACCCAUCACACCGAUUAACCUGUCAUAAGCCUGCUUUGCUCAUCCCAGAGCCUUCUGUUCGACUCUAUAUUGCUGCACAUUCGUCGGAACCUCUCGGAGGUGUGGCAGUGUCGAAGCUCUGGCCUCUGACUGUCGUGAAGUCGGUCCAGUCGGGAAUCUCGAUCUUUUUCUCACCUAAAAAACUCAAUCGUGAGCGUCAUAUUAAGGUCAACGUUCUGACUUACCCGUCGCAUCGGGCUUCCGCUCGUACGGAUCACCCCCCAACACGCUAUUUACUUCGCGAGAUACCGCGGUCGAACGAUAGUGUAGUGAGGCACCGCAUAGUCGCCCAGAUGAAUGUGUGGGAAAGUCCUUGUUCCAUCGCUGCUGGGCGCAGCUAUACUCCCCGCGCUGGGCAGUCUUCAGAAACUAGCGCGUUGUCAAGGUCCGCAGGUCCAUACGUCGGCACCCGUUGGCGGGAGGAGUGCUGCAAGAGGCUUCUCCCCCUACCCCAUACCCUUUUCCCGCAACGACCUAUCAUACUUGCAUCGCGACCAGCCUUGUGCAGGUGCGACCAGAUCAAGCGUGAAAUGCGUAACUGGGUAUCUGAGCUGGGAAAGCGCAGUGGGCCUCUAAACUGUGCGAAACCCAGUGGCAGGACUUACAGGUAUCUCCCGGGGAGCAGUUCCGUCUUCCUCGGAUAUCAGUCAUUGCGUACUAGACUUAUCCCGAUCGGAAAACCGGCUACAAGUACAGAAGACUUCCCUCACAACCUGGCACGCUCCGUUGACAACAUGCUCACUGCUAUCUGGAAUUCGCGACGGCGGAAGCUGAGAGUCCAAUCUUGGAUCAUUCCGCCUCAUUCGAACCCCUCUCCCCGCUGUGAUGAAUCCACAGCUAAUUGUGUAUUGAUGAGCACAGGGAUAUCUUGGUUUGUCUCAAGAGGGAACAUGCGAAUAAAGACCACCAACAGCGCAGCUAUUCAUUACGGAUUAGCGCUCACGCUGGGUAGAUUGAGUGCGUACCACUCUUUUCUCCAGAUCGCGUUCGCACCUCCCAGUUCCCCUCAUCGUAUAAUCUUGCGCGAUUCACGUGCAUUUCCACUUUCCCCCUGUCAAUCGAACGGCGGUGGCAGGGUAAGCGUGCCUUACUUAAAACCGCAAGUUGGUCGUCCAAGAAUGUCCGGAAAUCUCCAGCGAUCGUUCGGGCAAAAACACUUCCCGGACCGCCUGUGGGCUAGCUUAACUCACUUCUCACGGCCUGUGCCUACCGACCCAAGCUCUAAGACCUCUCGAAAUGCUAAGGGUGGAUCUGGCCCCCCGACUCUAAAGACGGUCUAUUUACAAACUCGAGGAGCUGGCGGACGCCUUCCAAAGUUUCAGAGUAACAGCCGCAUGUGUCUUCUUAAUAGAUAUGUAAAAAUCGGAUCUCCUUCCGGCCGGACUGCGCUCGUACUUGCUCUAGCUAGUAUAGUACUUGUCUCUGUAGUGUCGGUAGGUAUGUGCGCGCUGGAGGGAGUUGACACCUUGUGGACAGCACGCGUUCGUGCGUCCAAGAUCACUCACGCCGGUCGUGGGCAUUGUGUUGAGUUUUUGGGUCAUUUGGGUCCACGAGAACGUAACCUAUCAAAUCGAGAAUAUAGACUGCAGAAGAAUUCGGCCACGCGACGCAUCUUUUCUUACAAUGGCCGCCGGUUUACAGAACGCAUCAAGCUAACAGACGAGUCGUGUCGAUCACUAGCCAUUGCGUGUUUCUGCGGUUCAGGAUUUGUGAGUCAUAGUCUUUCGACGACAAAUUAUUACACUGUCCACAAGCUCAGUCGGCUGACUAAUCUCGGCCAGGAUGGCUUACGGAUCGUAACGUCGUUAGUGGUCUUUUUGAGGGUAGCAACCCCCCGAGCACCCAGACAUUUGGAGCAGCUAGUCGGUUCUAGUCACCAGGGACCGUGUAAUGCAGCUAAAUUUCCGACACCAGGAGGGUGUACGGCACCAGCGUACAAGUUUUCUCUGUAUGGGUGGUUGGGCUUUGCUACACUCCGGCAAGCCACGGGCGGCCUGCGUAGACCUACUAGUGGUCCCUCCGCGGGAAGCCUGGUUGGGUCUUCACUCAGUCAUAAGGUAGCUCCCAGGGGCCGUGGUGUUAUGCAUCUUUGCGAGUGGUCUUCUACCCCUCCCAAAUGUCUAGUGCUGUCCCUAGUCGGUAGUUCGAGAUCACACAGUCUGCGAUAUGUGCGAGCUCAGAUGUAUUUUGGCUUGACUAGCUACCAUGGCCAAUUAGGUCUUAGUCAUAGAAGCCCGCAGACGUUCGCUGUGUAUUCUAUAUUCCUCCAAUGCCACACGCGGCUAUGUGCAGCAGCUGCACAGGUAACGUACAAGGGGGAGUACUUAACAGGUCAGCGACUUAACCGACGUCCCUUUCCCAACCAACCAGAGUGCUAUAGGCUACGGCUGCAGACGCAUAAAUCGAUCCAGAAUGAGACCGUCGGAUUGACUACUACUCUUGGGAACGGAGAACAUGUUACCCAUAACUCGAUUGAACAAAUACCAGACACUAAUCCGUCUCAUACAAUAACAUCAGGCCUAUGUGGUUCCCGUCUGCUGACGCAAGGGGGAGCACGUAGUGAUGGAUCCUUACGUUGCGACGGCAUCUGUCUUCCCAAACGAAGUAGUCUUAGGGCUGAUUCUCAUAUGAUUCCACUACGACAAAGACAUACUAGCUGCGUCCGGGGCUCGCCCAGCCGCUGGGUCCCGUUUGAUCGGCUGCUUACUAAGAGAUCAGAUUUAAAGUGGCAGACGUAUACUGCUGAGGCUCAGUCGCACUUUGUUUAUUAUUUUCCAUGUCUCAGGAGUUCGAAAAAGGUGUGGCGCGCCAUACCAUUUUCUUCGCCCCAGCCAACUAACGAGAAUUGCUACUUAUGUGCACCAAACGAUGAGGGCCCACAGUCGUUAUGUCAGUUAGCGGAGCGUAGUUCAUUCCUAGCCCGUAACGCCGGCAUUCACCCUGAACUCCGGGGUGGCUCGUCCGGUAACUCGUCCACAGUGGGGUCGGCUGCUACUGAUGUCGAUAGUCGGUGGUGGUGGACCGACCCAUUUCCUUGCUUGCCGAUUGUCACACAUACCAGUUACGGCACAAUAAUGUGCAUAAGUGAAAUACGUCACUGCUCGCGAAUACGCCUACAUCGUGGCCGAAUGUGUAGUCGCUCGAUUGAGACUCCCGAUAUCUAUGCCACACCUAGCAGUUGUCUAGCCGAUGGGCCAAAGCGGCAGAAGAGUCUGUUAAGGGUCGGGGAAAGACGAGGCAGGAAUGGGAAUAGAGGGUCCGUUGAUGGUCUACGCGGAAGUCAUGCCGUGGGCUUUUUUGUCGUGGACGGCAAGACAAUGGUUCGAGACGGAGAGCGGAUUUUACACAAGUACUAUAAGACAAAGACAGCCUUCCGGCCACCCUUAGAAUAUAACGGACAAUGCUGCGAGAGCUAUGAAUGUUGUUCUACACUUAUCCGUCACGCGGAUAAAGGGCUAGUCUCAAAUAUAACGGUUAGGCUAACCUUCAAUUGUCUCACACUCUUAGACAAUGCUCAACGUCGCUGUUAUGUAACAGGCCCACUUGUGAGCUGUCAGGCACCGCAAGGUAGAGGACGUACUGGGUCCAAACAUACUGGCGGGCAGGCAAAUUUACCGUUUAAUAAGCAAACUUACCUUAUCGUGAGUUUGACAUUGCGUAACUGGUUGCCCACCUCUAACUGGCGUGGAAAUGCUCGGAGAGGUUGUGAAGAGCACAACUUAUGUGUCAUCAAUGGGUCUGAUACCGGGAGCGUCCAUGGGAAAUUUGAACGUUCCAUCUCGCGGUUGGCCGUCAGACCGGCAACCCAUCUGGUUAUGGCGAAGACGUCCGAUAGUGGACGACCGGCGCGAUUUGUGUCUGGGCCGUGCACCAGUGAUUUGGGCAGCCCAUUGGCAAUCCGAGGACCGCCAGCGCUUUGCGCCCGUGUCCUGUUCAGAUAUCGAUAUAAAACGAGAACGCGUACCAUAGGGAAUCUCGAUGCAAGGAUCCUUUCUCGCGACGCUUCUGUUGAUCUCGGUUCCACAGACAAGACGAGUCGUUCUGACCUCCAGUUGACGGCUACCCCGACCCCUAAUGAUACCAGUCCUAUACUCGAGAAGCGGGGGGUGGCGCUGACGACAGCCCAGCUGUCACAAACGGGAGGAAAAGCAAAUGCAACUCAAGAUACUAUGACUCUGGCAAAACUGCCAAUCCAAAUCUCUUUACAGCCUGAUAUAAUGACACCAGCAAGUUUGGACCGUAGGCCAACUGAAUGUAGAAUUGGUUUACAGCGCAGACUACGGGUUUGGUCGGAGUCCAGUUAUACACCUUUGGGGAUUCGGCUUUCCGCUAGCCUGAAACUCACUAAGGCGGCACGACGUAACCCCAAUUCAAAUCUUACUUCCGAUCCCUGCAUAUGUUCCCCCUGUCCGGGAUCACGCGUACGCUUGCUUGCGGUUGGCUUAAUUUGGCCUAGAGAUCGCGUACAGGCGCUCCUGUCAAAGUCGACCCACAGGUUGGAUAACAUUCGCCCCGAGCAUGCGCCCGACCUGAAAGCCGUAGCACGCAGUUGUCCGUCUAACCGUCGGACUCAUGGACGCGUUAUAGAUGACCGACUAACCAGAAUAUCCGUAUCUAGCACGAAAGGGAUGCACCCACAGUAUGAACUCUGCUCCGAUGAUAAAGCCCGCAGGCGUGUAGUGUCCCUUAUGACCGCACUAUACAGCUUACAGCACACCCGCAGAAAAUAUGUGCUUCGGUACGGGCCCUUCACGUUCCUUAAACACCGUGUUGUGCGCGCGUAUCCCAAUCCCAAUGACCUCUCUGGCCCAAGUUUAUCGUGGUUGCAAAGUGUAGAUCUGUUAAACUACCCCAGGCUCCCGCGCGAACGUACGCAAUGCAUAAGCAGACUCUUGGAGACUGUCCUCUUCCUGGUGCGCUUGGUGCUCGGGGUCGACAUAAAUAAAAGGAUCGGCGGCCGUCACUCGAGGCUGAUCUACCUUCGAGUCCUAAAGUCCGUGACCUACCGCCAUCGGAAUUCAAUCAGAAGAAAGGGCCUUACCAUCGCCAUCCAGCACCGAGGCACCACGCUAGUAUGCGCACCAUCACCGGGAAGUGCUGUGAGCUACCGACGACGACCUAGUGCCCCUAGCAUACCUUUUCGUUGUGUCAUAAAUCACCGAGUCCCGCCUGUGGAAAGUGGGCACCUUUCCUCCGCUCAGAACCCGACUCCCUAUCCGCAGGGACGCUGGAAAAGAUAUGGUGUGCGGUACACUCAAUAUCAUACACUGGGACCCCGAAUUAGGACGGCCGUGCUUUUGGAGGGUUAUGUAUUUUGGGUGGGAUAUGAGGGACAUCCUAGCAGUAGUAACGGUUCCUCUGCAAAACGGUACCAGCGCCAGAUCAAGUCAGAGCGGGAUUGUCCGCACCGUUAG'
    switch = False
    for i in range(0, len(f)-4):
        if f[i:i+3] == 'AUG':
            switch = True
        if f[i:i+3] == 'UAG':
            f = f[:i]
            switch = False
            return f
        if f[i:i+3] == 'UAA':
            f = f[:i]
            switch = False
            return f
        if f[i:i+3] == 'UGA':
            f = f[:i]
            switch = False
            return f
        if switch:
            for x in dict:
                if f[i:i+3] == x:
                    f = f.replace(x, dict[x], 1)
                    return f

#method 2 for Translating RNA into Proteins - worked?
def rna_to_prot_2():
    rna = 'AUGAUCUAUGACUACACAAGAUGUCGCAGACCAAACUUGUCCAUACAUGUAAACGCGUUUGCUGCUGCCCAGUUCUCAGGUAGCAAUUUCACGCAGACAGUUAAAGACACAACUGCCUAUCUAUGCCGAAUGGAGAACAGGAUCCUAGCAGUAGCCAGAUAUGCACGGUGCCUGGCCACUUCUAUGUCCUGGGAAAUGGAUCAAUACCCGACGCCAACAGAGGCUGAUAAACGGAGUGCGUAUACUACUGCCCAACAGACCAAUGACCAGGAAGUUGCCGAUGACCAGAGAGUUGCGAAAUGGGACAUUAGGCACUUUACAUUACCCCCAGAAUUGGUUGAAGGACGGGUGAGACGGGGCGAAUUGCUACCCGUGGUACGGGUCUUCCGGCAGUUAGGCAGAGUGGUGUGGAUGUGCAGAAGGUUCCCUGUUAGAUCGCGAGCCAGCACUACGCUCGUUACCUUGAUGUCAGGGUUUCAUGCGCUGAACACCUAUAUCCCUCCAAACCUCCCGAUCUUGAGGGUUGAUGCCCCCAAAUGGUUAAAGACCGAGACUAGUGGUUCCAGCCACUACCUAAAGAUUAUCCGGCGUCCCCACGGUGAAGGCAACAUCCAUUAUCGUGAAUUAGGGCAUACCCAAUGGGGCGUUUACUUUAAGCAAACUCUACACGCCUGCUCGAGGCGACUAGGUCGGUCCCCGCAUCGAAACCAAGAGCUUUCUCCCCUACCGCCCAGCCCUCGCGGGUUGUGCGGCCCCUUCGUAUUCGUCGCGGGUGUGCACGUGCAGAUUAAAUUGAGCCCCCCCGUCGCGAGACAGAGAAUGCGUCGCUCAGCGCACGUACUCUCAAGUGUUACCAAGAGUCCAUAUGUCAGAUAUUCGAACUCCAAAUUACGGAUCAGAAUAUCCUAUUCUGAAAGUGUACCCCAGAUAUCGACAGGUAUCCACUCGACGAGCGAUACGCUAAACCCACUUGCACCCGCGCUGGCCGGCGUUACCCCUUACCCUGGCCAAGCAGAUGCAAAUACAUCAUGUAGGCGAAUCGAGCUGAUCAACCAUGCCCCUUCCAUAUGCACAAGCAUAUUUGUGGUUCGUAUGACGCAUGGCGGGUCGGGGACCAUUCUAGAACCCCUACUACGCUUAAACGUGGCAGAUGUCACGUUUAAUAGUCUGUGGUUUGUACAAUGUCACAUGUUGUGUAAUUCAAGUCAGCCAUAUCCCUUUUGGUCGACUUACUCUCUUACCGCAUUAAAGUCUGGUUUCGGUCCCGGAUUACGACUAGCACCUGCAUAUUUGGCGCAGGAAGUCGAUUCCGUCCCUAGAUGUGCAAAAUGUACGUGUACCCUGCUGGAUAGCGGGCUCGAUUUCGUGCAGUCUCCGCAGUCGGUUACACGUCAGAGAUGUCGAAUAUACCAACGGAACCCUUUUGGGAAAUAUUACGGUAUCAAGUUGAAUCCCAUGUGCCCCUCUUGUCGGGCACAGAGAUCCCCGUUACCCUCCACCCAUCAGAGAACGCACUGUCAUUGCUGGCCAAGCAGGGUCGCAAGCAGGACAAAUUCCACGAACGAGCUGUUGGUGUCCUAUGGAAGUAAAUUAUUCUCCCCGAUAUGCACCCCUUCAGAGUGCUGGGAGAGCCCCAUUAUGUCUUGUAUAGUCAGUUGCUCGUAUGUUUACUUGCACCGGGUAAGGGAAUCAGGCAUUAAGCCCCUUUUGCGACCCAAGAGUCUCCGACUUCCUGCCACAAUAGGUCGUCGGCCCGCUUAUAUGUCAAAGCCCAGAGUAAGACUGUCUGGGAUGCCUUUCUGUCCCAUAGAGUUCGAGAGCCAGUUUUCCCUAAGCAUCAUCCUAAGAACCACUUCAAGGAUACGUUGGCAUAAACUAAAGUCUUCUGAAGUAGCAGAGUUGAAACAUAACCACUUUAUAAGCGGGCAUUAUCAACCCAUUUCCGUCAAACCGAGCAUCGUACUCGUCCAUGUCCUUCGACAGGAGACACCACGCCGACAACGUUGGCCGUCGGAAGAGGCUGGUACGGGUGCAUUACAAGGUCGCAUGGUACACGUUCUAGACUGCUCCUUAUCUAAAUUUCUGAUCUCUGCAUUUAAACGGUGCGGUCUUACACAUCCCGAGCUGCCAGCGACCACCAGUCUGUCCUACGGAUGCCCCUCUAUCGCGUUACUUCAAGGGACACAUAAGUCCACGAGUGAGCUGGGAAUGUACUACAACCGUAUGAACUCCUUUCUCAGAGAGGUAGGUCUACCGAGGAGGGUCUUCCAAGGUUCACCUCAUUCCGUGUUGAGGCAUAACGGAGUCGUGGUAUGUGAUUUAGACCCGGGGUUUAGGCCUCCGCCUGAGCCAACAGGCAUCUCUUUAGAGGAGCAUGCAAUUAAGAAUCCUGCACCGUGGUCGCGACAAAGCAAAGUACGGACACAAGGAAUAACUGAGCUUAUUGGUCAAGGGGCAACCUCUUGGGAGAAAAUGACCGACGCUAGCACAAGGAGUAGAUAUCGCCUCGUCCAUAAUUAUUACCGCGGGCUCAUGGAAUUAGUAGUGAAAGGGGGUGACCAAGUUGAACACAAGCCAGGCAGUUAUGCGAAAGGUGUUCGCAGAAUGGGUUUAGCAGGACGACCGACUAAUCCUCCGUGUGAGCGGGUUAUAGUCUGGAUAGGUGCUACGCUCAACUUUAUUCAUGAGGAGGGCGCGAUGUUGUCAGGACCGUCUAGGGCAUACUCUGAGGUGACUGUCAGACAUAGCGGAUCCCGCAUGGGGGGCUCAAUUCUUUAUGUGCUCCUAGGACGUGGGUCAAUAUUGCUGAGAACACUUACCUCCAUUACGGUGCAUGGGGGUGUAAAUAGACUAGCCAGCCCUUUCCUGAGUAUCUCAUUACCCAACCUUACCUUCCCGGAGGGGUGGGGAUGCCAGUUACUGCUCCUGCGUCGUAUGUCGAAAGAGACAACUGAACUGGUAUGCGAAACGGUAAGAGGUGAAACUCGUCCUUAUGGGAGACAGUCAAGGUGGACGCGUGCCCUAGGGCUAAUCAGAGAACUCUCCAGGGCGUGGGCGUUCGUCAAACAGCGAUCAAGCGCAAGAUAUCAAUACCUGCGAAAGGAGCUGAUGGAUCCUCCUACCUUAUUCAUCAUUCCCACAGAUGAAUCCAGUCGCGCCGACGUUUCGGUACCUGCUUCGCUGACAUCACCCUGUCGAAUCCAAUUGACUCCGAAUGGAGCACACGGAUUCCAUGAUAGUCACCCGAUCUCCAUAGGAUUAGUCGUAAUUUUGGGAUACACUCUUUUGCAGACGACUGAGAAAUAUCCUGGACGGCUGAUGACGAAUCCUGCUCAACUAAGCAUAUGCACACAGAGAGGACGCGCCCUGUGGUCAAACAGAGUGGGAAUACCGCAAGAGGCCCCAGGUGCGCUAGACAACCUAGCAAAUACAAUGACGGUUUCAAUAUGCCUAGUGCUAUAUGUGCCGGUAUGCUGCGUCUGGAAUCGGUUAAAGAAAAACCCGCACGCGCUGCCGCCUAUGGCCACGGAGGGAGUCAUCCCCUCCCACUCGGGCCAAGAACGAGGUAAGCAACACUCACAGAACUGCAGUCGGAGUACAGCGUACUGCGUAUGUCAGAUCCCGAGCGCAGCUGGUCUACGGCCUGGGGGUUCCUCCUGCCCAACAUGGCCAUAUACUGGAGCCGCCGCUCUGCGGAGCAUCCCGAUUUUUCAAUUAUGUCGGUACAGGUUGAUUCGGAAAUGCUCGGCGUUACACGACAAACCCAAAUCCUAUUGGUUACCGAAGAAGUCUAUAAACCUCAAAUCUCACAUUUCGGGUUGGUCGCUGCAAAAGCACCUGAGCUUAUUCCAGAGUGUAGUUCGACUGUACAAGAAACUAACUGUUAGGGCGAAACGUAAAGGGUCAAUGUUGUCCCUGUAUGGUACGGCCGUAUUCGUCAAAUUUCCACGAUCAUAUCGUUCGCCGUGGGUCUGGUUUAGAAGAUCUCGUCAGCUGACCUGUAAGCUUGAGCUUCCCAGAAACAGAUGCAUCCAAUGGUAUAGGUUGGUAGACAUGUUUGGGGUGCUACCGGACAUUGUUGCGUCCCAGGAGCGUGUAGUGGUCACGAUCAAACAGCUGUUACUAAAUACCUGGCGAAGUAGAGAACAGACAUACCAGAUAUCAGCGUGCGAACAGGUAUGCCAGCAGAAGAUGUCUGUCAAUCCGCAGUCGAAACUUCGCGUUGUAUCUCUGCCAGAGUCGAGAAAGGCGACAAGCCGUUUUCGUGUUGCGCAAAUGUGCUGCGUGAACUCGGUCUCAGCGAUGGCUUUGCUGUGCGCCUUUCUUCCCUUGGUGAUCAUGGAAGCGUGGCUUCUAAUCGAGCAUAACGCCAUGAAAGGAUCCGUGCUCAAGCGAAAAGUUCCUAGAUUGCUUUCUUCGCACAUGACGUGCAUGACAGCCUUAGCCCACCGCAGAGUCGCAGUCACUACAAUUGUAGAGACUGGUCUUUCGGUUAUGAUCGUAGCCGACAUCUUAUGGGGCCCAUGCAAGUCUGGUCCCCCAGUGCACCUCGAAACUCAGUUCACAGGAGACGCGGCUAAAUACUUUACGGGCGGGAGACUUGGAAAGGUGAAACCAAGAGCGCUUGUAUCCACACCGCUAGCAUGGGCCGCAGGUGGUUAUUAUUUACUGUUGAUGUUCACUAACGUUCUGCGCCAAGCGUGGAUCUCACCUAUGUACCGCUGGUACAUAGAGGCGCCCAAAAUGAAAACAUCUAUAUUAGAGUCUCACGGUACGGCUAAUCUUAUACUGAUAAUGAGAAUACCUAGAAACUCGCUUAACUUGUCGUGCCGGGUCACCCGACCGCCGUCCAGUGGCAGGUCCCCUACACCACUUGGGGGCGGGGUGUCUUUGCCAUCAAGAUUUUUACUCGAACAAUUUGCUGCUAACGGUAGAGUUGGAUCUCCCUUCUCUAAUUAUCUUAGAUAUCAUACUACGAGAUGCUUUGGGAUGCGCCACGCUUUACGCAGCCGCGGAUCCCAAGGGUUGUAUCCUGUGGAGGGCUUAAGAGAGGCCGCGUGGGCGUCACGAUCGCAGAGCGUCAGAGACCCAAGAGACCUUGCACCGGCAAUGCCCACACGUCUGCCCCCGUCGGUUAACCUGGGGUGUGCUACAUUGGUCAGUAGCGCGCACACCACACGGUCCAAGUAUGCCUAUUUAAAACGCGCAGCAACCCAGCCCAUCGGUUUUCGCAUUACUUUACGUUUGGUCGCAUGUGGACCAUUUGAUGAUAUCGCGACUCUAUUGAAAGAGUUAACCCCGACAUUUCACAGAGCUGGUCGUCGAGUGACAAGACGUGAACUUUCCGUGCCUUCCGGUAUAAGCUACGGUAACCCAUUUGGAGCGAUCCUGGUAGCUCACACAUUUUACUAUAAAAAAGGGAGUUCCCGUCUUAACUUCCAUAACCGCCGCUUGGGUCAAUCUAUUCUUUUGCAUGGAAUCUAUUGGUGUAUACUGUGGGAUGGUACGGCGGGGGCCCCGGGGCUGCACUCCUUACGCGGAAGAGUUCUGAGUUUUCCCCCGAACGGUCUAGGAGAGGCGACCCGCGGAUACUAUAUCGGCGGUGCUCGAAUGUCCGACGAGCUCAGAAAUCUCCCGAUCACUGGCAGUUUCUUUGCACCAUCGGAGUGUGACACUUUAAGGACGAGAUUUAGUGUUGUGAAGCGCGAAAAGAGCUUCAUUACACGUUUAAGUAUUCAGAGCGCGCUAGAGACUAGCACAUUAACAGCCUGUCGAUUGCUCCCGGGAUCCGUCUGCCCUGAUCCCGAUUGUGGAGUAUCCAAAGCAAGUCUGGAGGGCCCAAAUCCUAGGCUCUCACCUGAGAUAGUACGAUAUGAUCAGGUGCCCUGCUUAGUCCAAAUGGGGGUCACAGUGCUGAACAAUUGCGAUAAUAUUUACUUCAGCGUUUGGUAUAACUUCCGACCAGGCACGAUAGAAGAGGGUGGAACAAGAUUUCUAAGUAACCAGCCUCCACAGAUUUGGCAAUUAAACAGGAUACAACCUACACUUAGUUAUAUCGGGAUAAGAGAAGAGGAUACAGGCAUGUUACAGUGUUCAUUAGAAUGUCUGAUGCGUUCCGUGAGGUCUAUCAUGGUUAGGCCGUACUACGGAUGGUCGAUUUAUCUAAGUUAUCACUUAUGGGAAUCCUGCUGGGAAACUACCGCAUUAGGCCACGGAGGAUGGCGGGUAGGUGUUACCCACUGUGGAACUACCCUGCUAUAUUCUAUACUAUGUUCGAACGCUAUCUCCCUUUUGCUUGAGAUCCCUUCAUGGCAGCUGGAGUCUGACGAUGAGUUUCGACGUCUAACCUUUGAGUUCAUAGUUAUGUUUUCAGUCUGCCAUCCUCACGGAUAUGUAGAGAAUGUUAGAUGUAGUCCUUGCCCUGUAAGCAGAUGUUUGUCGAGCUCCGUCUUAUUACUUGUUAUCCUGUGCAUCGUUUCCUCGCAUCUCGGUCGAAACGGUUGGGGGAAAAAAGUCCCCUAUCUUCGGCCCGAAGUAGCUGACGGUACUUUUCUGUCUCGUUUCAUGGACAAUUCGUAUACAUACAUAUCUCCGUUUUACAUUCGUAACUCAAUGACCCAGGGUCGUGAGUUUAAACGUGUACGCUCCACGUGCUACAGAUGGUUCUUGGCCUGUAGUUGCAUUGAAUUAAUUGGUAUUAAGGCUCAGAGGAGUAGUAUCUCGAGAUGGACUUGGACAUGGGCCUACGAGUGUCGAGGAACUUGCCAUCUAUAUUAUUGUGCGCGUCGCCACGUGAAAUCACCUAGAUCAGUGCGCGUCAGCGACGUGAUCCACCAACAGACAUACGGCGGUUUAAGGCGCAAGGUCGUUUCAAUACAGAGUCUUCGUACUUGCCAUGGAGUCCCGUCCGGCGCUCGCGCGGAUGUAGCCAUUGGUCGUUCCAUGAUGCCACACAAAUCAUGUGCAUACGACCGGUAUACCCCUCCACCGGUGUCCCGGAAAGUACAAUCUAUAGGUGUAGUUAAUAGUCUUCACACACAGCUACGUUUUGCCGAUGGCUAUUUUUCUCGACGCUGGCUCGACUGUGGGCAAAUCUGGGUCGAAACCGGCAGGGGACUGUCUCGGUUGGCUGCUUACAAGCCAAUGCUACUGCAUGGCCACAGUAGAUCAGAAGGAUGCCGUCGGGCGAUAAUAAAAGGGACCACGAAGAUGAUAAAUCUAGCCGAGUCGGCUUUAUCGAGGAACGGGUUCAGCCAUUCGUUGACUCAUGCUACUUUCACAAACUGCGGAAAAGAUGCCUUUCGUGUCGGUCCAUGGUACGAUCUGCCUGAUAUCAACAGUGCGUGGAAUGCUAAGGUUUGCAUACUACCUGAUAUUCCAGGCCUUACUGGACUUCAAUGUCUUGACAGGUGUUGCCAGCUCUGGGAGCUAUACGUCGCUUUGGUGUCCCAGCCAUAUCACUAUUUUCGCUUGACUGAGUGCGCAAUUCUCAAAGCGCCACAGCGCCGUCUUACCCAUAUCUUCACAGUCCGCACAUGCGAGCGGUGUCAAGUAUACCAAAGUUAUGAUUUUGCGUCCAGUGUGUAUCUUGAUAAGGGAAGCGCGAGGCGUAAAUUGGGGCCCGCCCCUGCGUACCUGCAUCAGCCCAUGAGGUUAUGGCGGGCUGCGUGGGGACGAAAUGACAUCGGUUUCCCGGGAAGCGUGGUGGCCCACAAUGAUACCACGCUGUCUAAGAACAUCGCUUUGCGCCCAUCGAGAGCUGCAUGUAUUGAGCCCUAUAGAUGUCUCGGCAUAUGUCAAGCAGGAAAUACGAUAACGCCCUGCAGAACAUUCUGUACGCCAAGUCUCCGUAUGUUGGCUGUUACUCGUAACCAAGCUAAUGCUUGUUUAUUCCACAGUUCAUUGUCUGAUGAAGCUGAGAAUACUACCGACAGGGACACAACGUGUACUAGGGCGCCGACGUACCCUGGAACUAAGGGUGCCUUACGUCGGGACCAAGGCGCUCAAAGGCGAUACGGUUACGUAUUGCGCAGCUGGAUAGACAUUUAA'
    prot = ''
    switch = False
    i = 0

    while i < (len(rna)-3):
        if rna[i:i+3] == 'AUG':
            switch = True
        if switch:
            prot = prot + dict[rna[i:i+3]]
            i += 3
#why does it not print the stop codon?? maybe something to do with how i increments?

#8 - Finding Motifs in DNA
def substring_finder():
    s = 'TGTGTCCGTGTCGAAGAATGCGTGTCGCGTGTCGCAGCGACGTGTCGTCGTGTCGCGTGTCGTGCCGTGTCGATTTGAAGGCGTGTCGCAACGTGTCGGCACACGTGTCGACCCGGCGCCGTGTCGGCGTGTCGACGTGTCGGCGTGTCGTGCACGTGTCGCGTGTCGCGCGTGTCGTAGTCGACGTGTCGAGCCGTGTCGTGCGTGTCGTACACGTGTCGGCCGTGTCGCGTGTCGCGTGTCGCAAGACGTGTCGCGTGTCGCGTGTCGCCGTGTCGCTGCACGTGTCGGTCGTGTCGTTCACGTATCGTGTCGTACGTGTCGGCGTGTCGCTCCAAACGAAGCGTGTCGTCGTGTCGATGCGTGTCGCCCGTGTCGTTGAACGTGTCGACTGCGATGCGTGTCGGCGTCGTGTCGCTGGATAGATCGTGTCGGCGTGTCGCGTGTCGACTATCGTGTCGCGTGTCGCACGTGTCGTCATTGCGTGTCGACGTGTCGGCGTGTCGTTGACTTATCCGTGTCGACCGTGTCGGTCAAACCCAGACGTGTCGTCGCGTGTCGCCGTGTCGGACGTGTCGAACACGTGTCGCGTGTCGCGTGTCGGCCAGCGTGTCGTGGCGTGTCGGCGTGTCGCACGTGTCGCGTGTCGACGTGTCGTACGTGTCGCGTGTCGGCCATGTCGTGTCGCGTGTCGCAACCCGTGTCGTCGTGTCGCGTGTCGCCGTGTCGCGTGTCGGTCCGTGTCGGCAGCGTGTCGTCGTGTCGCGTGTCGAGCGTGTCGTTAAGCCGTGTCGCGTGTCGACCGTGTCGTGGCCGTGTCGCGTGTCGAAATTCGCGTGTCGCGAGCGTGTCGTCTCGTGTCGGTTGCGGTTTCACAGACCGTGTCGATTGACCGTGTCGGGCGTGTCGCGTGTCGCCGTGTCGCGCTACTCGTGTCGAA' #main string
    t = 'CGTGTCGCG' #substring to locate
    indlist = []
    tlen = len(t)
    for i in range(0, len(s)-tlen):
        if s[i:i+tlen] == t:
            indlist.append(i+1)
    return indlist    

#9 - Finding GC Content
def gc_content():
    with open('rosalind-problems/data_files/rosalind_gc.txt', 'r') as file:
        data = file.read().replace('\n', '')
    locs = []
    name = ''
    names = []
    val = 0

    for i in range(0, len(data)):
        if data[i] == '>':
            locs.append(i)
            names.append(data[i+1:i+14])
    locs.append(len(data))

    for i in range(0, len(locs)-1):
        tempstr = data[locs[i]+14:locs[i+1]]
        tempval = ((tempstr.count('G') + tempstr.count('C'))/len(tempstr))*100 
        if tempval > val:
            val = tempval
            name = data[locs[i]+1:locs[i]+14]
    print(name, val)

#10 - Hamming Distance (this is literally just what I made to check #7 lol)
def hamm_dist(c, d):
    count = 0
    listh = []
    for i in range(0, len(c)):
        if c[i] != d[i]:
            listh.append(i)
            count +=1
    return count, listh

#11 - Expected Value of Dominant Offspring
def exval(a, b, c, d, e, f):
    return 2*(a+b+c+d*0.75+e*0.5)
#print(exval(16076, 16368, 17965, 16928, 18230, 16838))

#12 - infering mRNA from protein
def poss_prot(prot):
    protein = prot
    tcs = 1

    for i in protein:
        count = 0
        for j in dict:
            if dict[j] == i:
                count +=1
        tcs *= count    

    tcs*=3
    return tcs%1000000

#13 - Calculating the Protein Mass
mass = {
    'A': '71.03711','C': '103.00919','D': '115.02694','E': '129.04259',
    'F': '147.06841','G': '57.02146','H': '137.05891','I': '113.08406',
    'K': '128.09496','L': '113.08406','M': '131.04049','N': '114.04293',
    'P': '97.05276','Q': '128.05858','R': '156.10111','S': '87.03203',
    'T': '101.04768','V': '99.06841','W': '186.07931','Y': '163.06333 ',
}
def prot_mass(prot):
    weight = 0
    for i in prot:
        for x in mass:
            if i == x:
                weight += float(mass[x])
    return (round(weight, 3))

#14 - Overlap Grpahs
names, dna = fn.fasta_process(fn.rp('grph'))
def overlap_graphs(dna, olap):
    for i in range(0,len(dna)):
        for j in range(0,len(dna)):
            if dna[i][len(dna[i])-olap:] == dna[j][:olap] and i != j:
                print(names[i], names[j])
            
#15 - Finding a Protein Motif
def prot_motif():
    with open('rosalind-problems/data_files/rosalind_mprt.txt', 'r') as file:
        ids = file.read().split('\n')
    sqs = []
    ngly = 'N[^P][ST][^P]'
    for up_id in ids:
        temp="\nruehgeiurf"
        temp = (rq.get(fn.base_url+f'{up_id[:6]}.fasta')).text
        sqs.append(temp[re.search('\n', temp).end():].replace('\n', ''))

    for i in range(0, len(ids)):
        matches = []
        for match in re.finditer(ngly, sqs[i], overlapped = True): matches.append(match.start()+1)
        output = ''
        for j in matches: output += str(j) + ' '
        if len(matches) > 0:
            print(ids[i])
            print(output)

#16 - Independent Alleles
#import scipy
import math
#DOES NOT WORK NEED TO FIX!!!!!!!
def ia_do_not_call(k, n):
    scipy = 0
    tot = 2**k
    print(scipy.stats.binom.cdf(tot-n, tot, 0.75))
#ia(6, 15)

#17 - Consensus and Profile
def cp():
    names, dna = fn.fasta_process(fn.rp('cons'))
    #dna = ['ATCCAGCT', 'GGGCAACT','ATGGATCT','AAGCAACC','TTGGAACT','ATGCCATT','ATGGCACT']
    array = [[0 for i in range(len(dna[1]))] for j in range(4)]
    for i in range(len(dna)):
        for j in range(len(dna[i])):
            if dna[i][j] == 'A': array[0][j] += 1
            elif dna[i][j] == 'C': array[1][j] += 1
            elif dna[i][j] == 'G': array[2][j] += 1
            elif dna[i][j] == 'T': array[3][j] += 1
    cons = ''
    for i in range(len(array[0])):
        temp = 5
        val = 0
        for j in range(len(array)):
            if array[j][i] > val:
                val = array[j][i]
                temp = j
        if temp == 0: cons += 'A'
        elif temp == 1: cons += 'C'
        elif temp == 2: cons += 'G'
        elif temp == 3: cons += 'T'
    print(cons)
    print('A:', fn.listtostr(array[0]))
    print('C:', fn.listtostr(array[1]))
    print('G:', fn.listtostr(array[2]))
    print('T:', fn.listtostr(array[3]))
#cp()

#18 - Open Reading Frames
names, dna = fn.fasta_process(fn.rp('orf'))
rna = dna[0].replace('T', 'U')
#rna = 'AGCCAUGUAGCUAACUCAGGUUACAUGGGGAUGACCCCGCGACUUGGAUUAGAGUCUCUUUUGGAAUAAGCCUGAAUGAUCCGAGUAGCAUCUCAG'
all = []


def rna_to_prot(zna, protlist):
    switch = False
    j = 0
    prot = ''
    listh = []
    while j < (len(zna)-3):
        #print(zna[j:j+3])
        if zna[j:j+3] == 'AUG': listh.append(j), #print(listh, 'tiggered')
        j += 3
    for k in range(0, len(listh)):
        gna = zna[listh[k]:]
        #print(gna)
        i = 0
        print(i)
        while i < (len(gna)-3):
            #print(gna[i:i+3])
            if gna[i:i+3] == 'AUG':
                switch = True
            if (gna[i:i+3] == 'UAG') or (gna[i:i+3] == 'UAA') or (gna[i:i+3] == 'UGA'):
                switch = False
                if len(prot) > 0:
                    switch2 = True
                    for d in protlist:
                        if prot == d:
                            switch2 = False
                    if switch2: protlist.append(prot)
                    break
                prot = ''
                i +=3
            if switch:
                prot = prot + dict[gna[i:i+3]]
                i += 3
            else:
                i += 3

def rna_to_prot2(gna):
    switch = False
    i = 0
    prot = ''
    listh = []
    while i < (len(gna)-3):
        #print(gna[i:i+3])
        if gna[i:i+3] == 'AUG': switch = True
        if (gna[i:i+3] == 'UAG') or (gna[i:i+3] == 'UAA') or (gna[i:i+3] == 'UGA'):
            switch = False
            if len(prot) > 0:
                all.append(prot)
                for q in range(1, len(prot)):
                    if prot[q] == 'M':
                        all.append(prot[q:]) 
                #break
            prot = ''
            listh = []
        if switch:
            listh.append([gna[i:i+3], i, dict[gna[i:i+3]]])
            prot = prot + dict[gna[i:i+3]]
            i += 3
        else:
            i += 3
    
def orf(rna):
    temp = rna
    for i in range(0,2):
        for j in range(0,3):
            rna_to_prot2(temp)
            temp = temp[1:]
        temp = fn.rna_rev_comp(rna)
    fn.printlist(fn.rem_dup(all))

#19 - RNA Splicing
def rna_splice(name):
    names, dna = fn.fasta_process(fn.rp(name))
    #dna = ['ATGGTCTACATAGCTGACAAACAGCACGTAGCAATCGGTCGAATCTCGAGAGGCATATGGTCACATGATCGGTCGAGCGTGTTTCAAAGTTTGCGCCTAG','ATCGGTCGAA','ATCGGTCGAGCGTGT']
    mdna = dna[0]

    for i in range(1, len(dna)):
        mdna = mdna.replace(dna[i], "")
    mdna = mdna.replace('T', 'U')
    #print(mdna)
    print(fn.rna_prot(mdna))

#20 - combinations (Enumerating Gene Orderings)
def combs(k):
    tot = math.factorial(k)
    base = [[1]]
    for i in range(2,k+1):
        temp = []
        for j in range(0, len(base)):
            for n in range(0, len(base[j])+1):
                temp2 = base[j].copy()
                temp2.insert(n, i)
                temp.append(temp2)
        base = temp
    print(tot)
    for b in base:
        print(fn.listtostr(b, True))
#combs(6)


#21 - Restriction Sites (palindrome detector for some reason)
def palindrome_detector(name):
    names, dna = fn.fasta_process(fn.rp(name))
    data = dna[0]

    for i in range(0, len(data)):
        for j in range(i+1, len(data)):
            if data[i:j+1] == fn.dna_rev_comp(data[i:j+1]):
                llen = j-i+1
                if llen > 2:
                    print(i+1, llen)

#22 - Longest Common Substring
names, dna = fn.fasta_process(fn.rp('lcsm'))

def lcs(str1, str2):#too slow
    s = ['']
    for i in range(0, len(str1)):
        for j in range(i+1, len(str1)+1):
            temp = str1[i:j]
            for n in range(0, len(str2)-len(temp)+1):
                #if (i == 4) and (j == 6):
                    #print(temp, str2[n:n+len(temp)])
                if temp == str2[n:n+len(temp)] and (len(temp) >= len(s[len(s)-1])) and len(temp) > 1:
                    print('triggered', temp, str2[n:n+len(temp)], i, j, n)
                    s.append(temp)
    return fn.rem_shorts(s)

def lcs2(str1, str2): #works
    s = ['']
    for i in range(0, len(str1)):
        for j in range(i+1, len(str1)+1):
            temp = str1[i:j]
            if (temp in str2) and (len(temp) >= len(s[len(s)-1])) and (len(temp) > 1):
                s.append(temp)

    return fn.rem_shorts(s)

def lcs_list(dna):
    s = lcs2(dna[0], dna[1])
    for i in range(2, len(dna)):
        temp = []
        m = ''
        for j in s:
            r = lcs2(j, dna[i])
            for thing in r: temp.append(thing)
            #print('done')
        #print('done: the second version')
        s = fn.rem_shorts(temp)
    fn.printlist(s)

#23 - Partial Permutations
def part_perm(n, k):
    print((math.factorial(n)/math.factorial(n-k))%1000000)

#24 - Enumerating Oriented Gene Orderings
def inserter(b, t, a, c):
    temp2 = b[j].copy()
    temp2.insert(a, c)
    t.append(temp2)

def combs_orient(k):
    tot = math.factorial(k)*(2**k)
    base = [[1],[-1]]
    for i in range(2,k+1):
        temp = []
        for j in range(0, len(base)):
            for n in range(0, len(base[j])+1):
                temp2 = base[j].copy()
                temp2.insert(n, i)
                temp.append(temp2)
                temp2 = base[j].copy()
                temp2.insert(n, -i)
                temp.append(temp2)
        base = temp
    fl = open('eogo.txt', 'w')
    fl.write(str(tot)+"\n")
    for b in base:
        fl.write(fn.listtostr(b)+'\n')
    fl.close()

#25 - First Spliced Motif
names, dna = fn.fasta_process(fn.rp('sseq'))
def first_spliced_motif(dna, motif):
    ind, t = [], 0
    for i in motif:
        t = dna.find(i, t+1)
        ind.append(t+1)
    print(fn.listtostr(ind))

#first_spliced_motif(dna[0], dna[1])

#26 - Genome Assembly as Shortest Superstring - UNFINISHED
names, dna = fn.fasta_process(fn.rp('long'))#pred: gass
def superstring(lis):
    sstr = lis[0]
    i = 1
    while i < len(lis):
        print(len(lis))
        hasNoMatch = True
        for j in range(0, int(len(lis[i])/2)):
            t = lis[i][:len(lis[i])-j]
            #print(t)
            if (sstr.find(t) == -1): continue
            else:
                sstr += lis[i][len(t):]
                hasNoMatch = False
                #print('yup', i, hasNoMatch, sstr, lis[i][len(t):])
                #sstr = fn.str_insert(sstr.find(t)+len(t), sstr, lis[i][len(t):])
                break
        if hasNoMatch:
            print(lis[i][:20])
            lis.append(lis.pop(i))
        else: lis.pop(i)
    print(sstr)

def superstring2(lis):
    listToAssemble = [lis[0]]
    nextItem = lis[0]
    lis.pop(0)
    numLoops = len(lis)
    for i in range(0, numLoops):
        itemToCheck = nextItem
        switch = False
        for i in range(int(len(itemToCheck)/2)+1, len(itemToCheck)):
            startPoint = len(itemToCheck) - i
            fragToCheck = itemToCheck[startPoint:]
            length = len(fragToCheck)
            #print(fragToCheck, i, itemToCheck)
            for i in range(len(lis)):
                if lis[i][:length] == fragToCheck:
                    #print(lis[i], fragToCheck)
                    listToAssemble.append(lis[i][length:])
                    nextItem = lis[i]
                    lis.pop(i)
                    switch = True
                    break
            if switch: break
    finalString = ''
    for i in listToAssemble: finalString += i
    #print(finalString)
    for i in listToAssemble: print(len(i))



darn = ['ATTAGACCTG','GAATACGGGGG','CCTGCCGGAA','AGACCTGCCG','GCCGGAATAC']
#print(darn[0].find(darn[1]))
#superstring2(dna)
# ATTAGACCTGCCGGAATGCCGAATAC
# ATTAGACCTGCCGGAATAC
str = 'ATTAGACCTGCCGGAATAC'

v = 'AGCGATCTAGGTGGGTTGGTGTGGATGTCATTGCAAGAAAGAGCCGGAGCCAGACCTATTCCACTGGACCAACCGATGCTAGCACTCTTACTACGAAAAATAGCATGACCTATAAGTGTGCAATCTAATATTCCGTAAATTGAATCAATGGGGAGTATTACGTACCAAGCATTTTGAACTTCGTCTGACACCCCCACGGGCCGCATTGTGATCTTGTGAGAGACTTCTGAGCTTGTAGCGTGACGTTTGACCTCTGTTTATCGCCGCCTATGGTGGTAACACTCCTAACTTCTGGGTTGGTCGGGAGCGGTCCGGGACCTACCGTGTGGGGGCTATGCTCCATCGTTCTTCTTTTATCGCTAAGGTGGGGTTCCAAGGCGACACCCCACGAATATTTCCCTACTGTCTACTCGTTGTCGCAGTGGCCAGCAGTAGGCGCTTTATACCATATAACATATGCTTAATGGAATTAGTATCGAACCTCCACGATGGTGAGTCGGCCATCGATGTACGCTTCCTGAGGAGCCAAGGAAGAGATCACCAGCTCCGGCTAAGCGCGGAACATCCACACGATTTGTGCCATGCGGTTAAGTCACACCCTCGGTCTTACTACCGATCTACTTTCCGCACGTTGCCCTTCAAACCAAACCGACAAGGACCCTCGTTCCAGGGGGCTTGGCATAAGTAATGTTTAACTTTCCAACCATTGCCTGGTGGAACGCTAATCTTGCCTGCTCAGTTACTAAGTCTTTCCGCCAACTACTGGCAAACTGTCGGAACGTCTTGGCAGAACACGGCGGGTAAAAACGCGTGCCTATCGTCTCCGCAGCTACCTTATGCTATTTTTGATCAGTGGAGTTGCAGTTGCCTCAAGATTCTTAAAACCGTCCATTAAACAATAATCTTGCTAGGACGTTAATATGCCAACGAATACGTCGGTTCGGCATGTCTCGAATTAGGAGGCAACTCTCATGTTTCGTGATATTACGCTCCTGTCGTGGCTTAAGCGCCAAGTTACCAGCCCATTCGGCATGCAATGCCTTCCGCGTGCTACTACACCAAAATTCGATCAGCTATGTGCTTCAAACGGCCCACTATACTGTAAATTAGATGCACTCTCCAGACAGAAAAAGACGACTGTAAACACTATGAGGAAACTAAGGAGTTATGCCCGACCTGACTTAGGGCTACGTAATTGAGCCTCTCTGAGCCCTTTTTATGAGGTCGCTGCGAGATTCGCCAACCAGTATCACCCGGTCTTTCCCCATCTTGCAAGTAATGAATCCAAAGAACCACGGTCGCCATCCCCCTTCTTCGGGTCGTCAGTGAAACAGGTTAGCCCTCTCTGCTTTCGGGGTTGGCAGTGTGCCCCACCATTATCTAGATAGCGAATTACTGGGTCACTCAGTGTGACGGTGTGGCGTGATCAACTCAACAAGCCTGCCTGCCCTCGGTTCTCGGTCGAGGACGAACGCCTTTATATGGGACCCGTAGTGTGGGGAGCTGCGTCGCCGGGGCTGAACTTCAGGGGTCCTATTAAAGATTAAGGTTGTTGATTTTGAGCCCTATACGGACTCAGACCTCTGCGTGTCGATCACAATCTGAGTCGGAGGTTTGGTGGTTATTTATTTAAGGACCCTTTCGTTTTCGACATTAGATTGCAATTTAGCTTTAATTCACCACCTGGCCTCATCTGTGAGGTAAGGTTTGTCTTGTGTTGAACCATAATGGTTCTCTACATACTGTAGGCCACATGACTAAGTAACATGTGACATTGGGGCTATGCAAGAAAAGGGATCATCCATCCTGATAGGGACGTTAAGCAGTGAGACCCCACAACCTGTCGTCACCCCATGCATACCAGGCGACGGCCTGGCACAACGGAAATCATGAGTGAATTACCATGATGAGGCGCAAATGATCTCCAGATTCTCAGTATCCTGCAGAGACAAGCAAGGGGTCACGCGGTTAGCGCCGACGGTGTCATTAAGAGCTGATAGGATATTATCCGTAGTGAGCCACCTAGAACGAGAAATCAAATCTACCCCAGCACCAATGGGCTTCACTCAGGCTCGGTGTACAATGGCATTAATTGACTCCTTGACTACCGTGCCCACTTGTGAATGTCATCTAGCTGTACGCCCGGTAGTAGTTCGTCGCCTTCGAAGATTGGGAGATCCCGCCTGGCTTGACGGGACTCTAGCGATGAACTTTTACCTTAGACGCCAACCGTGATCGCTTCCGGAAAAGAGTACTATTTGATTGGTGAGCGAATGGCCCCTGTTACGCGGGTCCCCATTTCCGGTGCGACAGTTGCTATGGAATATATCTTGGGGAAATTTCCCAATACCGGCCAAAGCCGGTAACTCCTACTTTAGATCAGCCGGCGACCGCCGTCGGTACGGCACTACTATTAGCAGCTATAACCGTGCGTGAGAATATATAAAGGTGCGAAAAGAGACGTTCGTGGGTTGAAGCTCACCTCATACGCTTGCGGTGTGATTATAGTATCCGAACAAGTACGTAACCAAAGTTCTGACTACAAGTAACACGGTGGTAATGTCTAGCCGACACCAGTACTCCCCTAGCGATTGCCCACTGTTCTGTACGACCTTCGGACAGTTCGACGGAGACAGGCGTCACTTACTAGTGTAGTCTGTATTTTGGTTCGAATACCGCTTACCAATTATTTGTCGGTTCATACGTGACGATAGCAGGGCGCAGCCCGTATTCAGTACATATGTTGAGGCACTGAATATTGTCTATAAACCGGTTTAACATTACCTTTTGTCAGGAGACCCAAGCAACAACGGAGTCGGGCTCCGATAACGCGCGGTTGTACGAGTTCACGCTTTAGCATGAGACGCGTTGGTAAGCGCGAGGGTAGGCGGGCCAGATCACCGCCTACGTTAGGCGCTTCCGACTTGCCATAGCTATACAACTATTACGACTTCCCTGGAAGCTGGCCGTTCGTATTTTTCTCTCAACGATTGGGTCCCCCGCATCTCCTCTCTGCGCCCCTAAAACGGCTTCAGGCCTTAATAAGCGCCTCTTTGGTAATTCGTTCTTCACCCAGGCATATGAGCAGAGACCGCGTGGGGTGCAAATACGTACTTAGGGTGTCTTTGGAGCGTCTACCGCAGAATAAGGACACCAAAGATCGGTGGGAGCATATTTCATCATTACCGGAGCCATGCACTTTCTTCTTTCATACATGAAAATTTCCTTACGGTAGAAATCTGTCTCCTCGAGTTCTCAACAGATGTATTAGCGCCGAACGAGTGACGGGGAGTTCAGCTCGAAGTAGGAGCACAATCCGTGCCTCGATAACCAGTAAGATAAAAACAGCAGGCCCGGACTGAGACGGGGGCCATAATATCATTGAGCGTAACTGTACTCTGATTTCCATTGGAGTACGACTTTCTAACTCCCGGCTCGGGGATCACTATCGAATCGCCTAGGTGTGGTGGCGGATGGATTATATTTCCAGGTACTACTAACGACTTCAGGAAACGGCGTCGATTAATAAGTGACCGATCTGATGCCCTTCCGAATGGTTAATCGCCCATAGTAACGCAGGGCGTAAACCTTGGGAACAGCCATGTTCCTCCCTAGGTTTGTACCTTCACAGAGCACAGGCGATTCTAGGGTCCGGCCATCAAGTGTTAGACCAACGCGAAATAGTACCGCGCCTTACACCCCTCCGCTTTGTCTTATGGCAGCCTGCTCATTGCTACGCCAAGCGACGTACATCGTACACAACCAAGAAGAATGTGCAAAGTTTTAACATACTGGCCTGAGATACAACTAGGGATCAATGAAGCAGCACGTCTGGACATGTAGCAGATCATCCGGCTGGATCTGGACATTAGCCTACTGGCCCGTGAAAAACCTTAGGTCTAACCTTGGACGTGTACACGTCCTCGTGTAGCAGGCGAGAGGGAGGCTATGCAGATAAAATTTGGGGCTGTCCGCAGAGCCTCTCGCTTGCAATCATCCCGCATCACCTCTGTGATCAAGGCCAGGTTGGTTCAGTTCAGTTGAAGTTAGTCTGCGAGGGTGCACTTCGGACTTTCAAGTTCATTACAATTAGAAGTAAATTCAGTTGGTGGTGTGAGCCCTGTGCGTGCTACCCACTCCTTTAATACCGGAAGCTGTCTAGTCAGTCAAAAGATACACTCGGGGCCAGAGGGGTGCGTTGAACACCGAGACGCGCTCTATAGTTCCAACCGAGTACGGAAACAGTCGACTGGATGGATATTTCTGCGAACTCGTAAGCTAGAATTCTGACTACTCCCCCCCGAGCGCATACACATGCAAAGTGCGTAAAGCTGGAAAGATCCTGCGTAAACAGGCCTGCAATCCCAGCCAACTTACCAGAACGGCGGTTCGCGTCGGAGATCGCCGCCCCGAACATCGTGCCTCAATTGCGACAGTCCCGGAGGTTCTAGATCCCGAACATGCGTGCCCAACTTCCACCGCTGGCCTAGCCCGAGTCGCGTGTTAATTCCAAAAAGCGACACAGCTCGTTCTCCTACTGGAGGCCATTCGGCAACTACCCCTATTTAGCGTCTGGATTCTAGGGCGAGGGCACCGTGGCAAAGGCTATGTAGAATCAATTTCATAAGAACGCGGGATGCCAGCCCCCGTCTCTTCGACCACTCACCTCCGACTAGCAGAACTTTTGTTGCATTCAATATGCTATGCAAGAATTGTAGGTGAATACGATAGAAATTTTAACGATCGACTGTGATCTGGTCCCGGTGGCCTAAGGCTCGGTCACTTATTCTCCTCGTTCCACGTGTTGGCCCGCCACTCCTAACCCTTTCCTGAGATTACTTTATATCCGCAAGTTGTGACGGAAGCGTCATACCTAGGATTTGCGAGAAGACATATTACTGGGGTATTTTGCAACCCTCCCGGGTCTTGGGCACGTGCGACAGAACCAGGAGCGCGTGTGGCGCCCACGCTCCATGCACTACGGACCATATATAGCTCTATTCGGCATAATGGTTATAAAAGAGGGATAAAGAGGTAGTGGGGCATGAGGCACTGAGCTCGGCTGAAGTGAGCGCACATTTCCATGGTATTTTGCTGCCCAGTGAGCTTTCATGCATTCGATCGATCGGACGATAATGTCCTCGTCGATGATGATACGAGTATCAGGAAACAATCATAAGATAAAGTTCATGAGGGGCATGCACACTCCCCTCCACGAATAAGAAACAATCCCAACCACCAACCTCCGTGGAACCAAGAAGGGCCTGACCATTGTTCTTACCCGTTGGCCCTGTAATCGCGGATCTTTGAGCGACTCCGCACTGGCTGCTGGTCAGACTCGAACTCTTTGCGGGTACTTGCGGTGAGGAAGAAGATCCATCCACTGACTTCTCGTATTCAGACAATACCGGTCAATGAGTTGGTTTCACATCGAAGATGCGGAGGGTAGATTTAGGTTTGGTGCACACGCCGACCTCGGCGCAACTCGCAATACCTCGAAAGGTCTCATGCATGTCGGGATCCTGTGCCATTGTCACAGCTTGAAGACTTCCGCGTGAAATTGCAAACTGGGAAACCTACCTGAATTAGGGTGGCACCAGCGCCCACTCTTGGCCACTACGTCTTTATATAACAACAATGGAAACACATTTGCCTGTCCGTCAGCAAGTGGCTGCCTTACTCATAGCGCACGAAGACTAGAAGTCCTTAGATACTTATAGCCGTAGGGTCACGACGCTGCCCTTATACTTTAGCAAGATGCACCTTATCAGAGTTTCCGGCTGCCCCGGCATGCCTACATCGCCCTACAAAAAGTCAGATGACCCTTACACAATGGCACTCATAATATGAAAGGGACTCTATTGGAAGTCTAAGTGCGACAACGAGTCAAGTTGGAGAAATGGGACCGGTGTCATCTTATGACTCCACACCTCGTCGTGACCACAGAGCAATCGGTGGAAACGTCAACTGAATCAAACCCTTAAACGACCCGGGTTATTGATAGAAACCCAACCATTCAACTCCATAGAGGCTGCGGCGGTCGGAATTTTAATGACACATCAACAGCTTTCCCCACTTCCAGAGTAGCCAGCTCGAGTTGTATGCCTAGACACCGGTGGTCTCGAAAGGTGTTGAAAACCGGCTTGGCAGTTTCCCATAACGAATAACCTTCTAAAAGACATCGGTCCCTTGTGAAGGGGCCAGCGAGTCTAGTCTCACGCGCCAGAGTCCTTTTCTAGGTAGTACATTTAAATTCGGCTGTTATTTCTAGGACTTCAATTAAACTGGGTCAGAGCATCTACGAAGCTTACGTACACGTGGTGAAACGGATACTATATGCAAATCCCGCCCTCGCTGAGCCTTGCAAGAAACGAGCTAGTAGTTGATGGATTGTCTCCGATTGGCGTGCCTACGAATCGCGACCACGCGTTCTGAGAGATAACCCAGTAGCAACTGCAGCTCGCTCATCACCCTAGTAAGTATAAACGCCTACCAGCGGTGCGAACGAAACCCACCCAGTAGCAAACGGAAACATCCGCTCAACTCGCCTGCTAGAACCACGTATCTTTAGTTACCCGGAGGGTTAGTGGTAGTCCCAATAGACTAGGTGGATTCGAGGCCCACCCATGGATGACTATGGCCGACTAGGCCTAAAGAACGCGACGTCGACGTGGGAGGTCTCCTTAACAGCCCCCGTCGCCGGTGATGTCTACATTAATAGGTAGTTAGATTGAGATCCCGATGGCTTAGTTCCGTACATACAACCACAACCGACCAGGTTATCCCATCACTTGAACGCGGTAGTACAATACCCCCACAAGGAAAAAAGATGTCTAGGTCTCCGCCCGATGTCCGAAGGTGGCAATTAGTATCTAAAGGTATAGTCTCCATAGCAGAATGTGTTAGCACCGGATGACCGAGGTCCGAGAGCAGCGCAGTCACTCGTTAATAAGAACGGAGTACCACGCCGGAGCAAGTAGTGTACAGAACACATTATCGGCATGAAGTCCTCTGTTTTTGCATGCACGGTCTCTCCATTTATGTTGTCTCCGGATAGCCGAGTGATCAAAAGAGAAAGGAACAGTCCTCCACCTACTGGTTGTCGCAGTACCCACCCCGGGTGCGAAAATCACAGGCGCTCATGCCGGTACTAAGATTTCAGTCTGCCTCTTCTTAGTTCATCGGCATTGTTAACAAGTTAACCCCGGCGGTTGCTGTGGAAAATCGCCTAGCTTACCGAGATGACTTACAGAAGTGTCATACCTAACAAATCTTACGCAAATTCTGTGACGCCCGCTGGAGCCTGGCGACCAATACGAGTGGAGGACTCTGCGCCAGCTCTAATACGACTCGCTTAGTTAACCTCCTATAATCCATCGGTGATAGCACACACCGCATAGCATTAGCCTAAGTTCTCCGCATCTCCAGGGTGTCAAAGGGTTTGATATTGTGCTGAGTATGTGCTGATGTGAGTATATTTATGCTAATTGGCTCTTCTCTAGGCGCGTTCCGGTCCAAGACCGACTTTTTCACTTGTAAGTAACCGTATATCCGACAGGTGACGATCCCCGGTTGAACCCTGTCCGGGGCACGGCGAATGCGCAAACGATCGCTCTGCTCACCGAACCTAAGGCGATCTTCCTAGAGGCAATCTGGTACTGACTCTACCCGGTTCGATAGCCCGCGCTAGTCAAAGTGGAGATTGTTTGCACGATTTGCCCTTCAGTACCAATTATTGAGCTACGCGGTGATTCCTGCGCATGGGTAGGCGGCTTCCGGCTCTTAGTCTACATAAAAAGCATACATTACGGATGCTAGCTATTCTACCCTAACTCTCGTCGTCAATACTAAATGTTTAACTGGAGGCGCAGTTAGTTTCACTCTTCCTGTAATTTAGGATTTCTATCCGGATTGAGGTGGTCATCCCGGGCGCAGGATTGTTAGAACTGAGTAAAATTCAACACGGCGCGCAAGAGGGCGTTAGACGGGGGACGGCATGCTCAGCGAAGTAAGATGGATTTATTCCATAGGGCAAACGCTGAAGATACACTAAGGACGTCGGTTGCCTAGGTCTCCGAGGCTCCAGCTCCACACCCCGGGCTTCGGTCTCTCACGTCCGGATCACCTGGCAATTTCGAGTCCATGGCCTACACGCTCAGTCATTATTCGGGAACTGGCACACTTAATATCTCCCTCCGGTTACATACAATATTTGAGAGGCTGATGCCTGGTGAGAGCGGTAGACGTTGTTGCTCGACCATATCCGAGGCACGACTCCGACGCGAAGACACCGCTCCTCGACCAGCTCTTGCCACCCTTCCAGTCACTAGACTTCGGGGCGGATGAGTCGTTAGTGAAATTCATGATGGCTACTCTCTGAGTTCCGTGCCCTATCGTCTAGATCAGGATCGAAGACCCCGCGTTTTTGTATAGTCAAAAAACAATGCTATTTTGATGCATGCCGGATG'
r = 'AGCGATCTAGGTGGGTTGGTGTGGATGTCATTGCAAGAAAGAGCCGGAGCCAGACCTATTCCACTGGACCAACCGATGCTAGCACTCTTACTACGAAAAATAGCATGACCTATAAGTGTGCAATCTAATATTCCGTAAATTGAATCAATGGGGAGTATTACGTACCAAGCATTTTGAACTTCGTCTGACACCCCCACGGGCCGCATTGTGATCTTGTGAGAGACTTCTGAGCTTGTAGCGTGACGTTTGACCTCTGTTTATCGCCGCCTATGGTGGTAACACTCCTAACTTCTGGGTTGGTCGGGAGCGGTCCGGGACCTACCGTGTGGGGGCTATGCTCCATCGTTCTTCTTTTATCGCTAAGGTGGGGTTCCAAGGCGACACCCCACGAATATTTCCCTACTGTCTACTCGTTGTCGCAGTGGCCAGCAGTAGGCGCTTTATACCATATAACATATGCTTAATGGAATTAGTATCGAACCTCCACGATGGTGAGTCGGCCATCGATGTACGCTTCCTGAGGAGCCAAGGAAGAGATCACCAGCTCCGGCTAAGCGCGGAACATCCACACGATTTGTGCCATGCGGTTAAGTCACACCCTCGGTCTTACTACCGATCTACTTTCCGCACGTTGCCCTTCAAACCAAACCGACAAGGACCCTCGTTCCAGGGGGCTTGGCATAAGTAATGTTTAACTTTCCAACCATTGCCTGGTGGAACGCTAATCTTGCCTGCTCAGTTACTAAGTCTTTCCGCCAACTACTGGCAAACTGTCGGAACGTCTTGGCAGAACACGGCGGGTAAAAACGCGTGCCTATCGTCTCCGCAGCTACCTTATGCTATTTTTGATCAGTGGAGTTGCAGTTGCCTCAAGATTCTTAAAACCGTCCATTAAACAATAATCTTGCTAGGACGTTAATATGCCAACGAATACGTCGGTTCGGCATGTCTCGAATTAGGAGGCAACTCTCATGTTTCGTGATATTACGCTCCTGTCGTGGCTTAAGCGCCAAGTTACCAGCCCATTCGGCATGCAATGCCTTCCGCGTGCTACTACACCAAAATTCGATCAGCTATGTGCTTCAAACGGCCCACTATACTGTAAATTAGATGCACTCTCCAGACAGAAAAAGACGACTGTAAACACTATGAGGAAACTAAGGAGTTATGCCCGACCTGACTTAGGGCTACGTAATTGAGCCTCTCTGAGCCCTTTTTATGAGGTCGCTGCGAGATTCGCCAACCAGTATCACCCGGTCTTTCCCCATCTTGCAAGTAATGAATCCAAAGAACCACGGTCGCCATCCCCCTTCTTCGGGTCGTCAGTGAAACAGGTTAGCCCTCTCTGCTTTCGGGGTTGGCAGTGTGCCCCACCATTATCTAGATAGCGAATTACTGGGTCACTCAGTGTGACGGTGTGGCGTGATCAACTCAACAAGCCTGCCTGCCCTCGGTTCTCGGTCGAGGACGAACGCCTTTATATGGGACCCGTAGTGTGGGGAGCTGCGTCGCCGGGGCTGAACTTCAGGGGTCCTATTAAAGATTAAGGTTGTTGATTTTGAGCCCTATACGGACTCAGACCTCTGCGTGTCGATCACAATCTGAGTCGGAGGTTTGGTGGTTATTTATTTAAGGACCCTTTCGTTTTCGACATTAGATTGCAATTTAGCTTTAATTCACCACCTGGCCTCATCTGTGAGGTAAGGTTTGTCTTGTGTTGAACCATAATGGTTCTCTACATACTGTAGGCCACATGACTAAGTAACATGTGACATTGGGGCTATGCAAGAAAAGGGATCATCCATCCTGATAGGGACGTTAAGCAGTGAGACCCCACAACCTGTCGTCACCCCATGCATACCAGGCGACGGCCTGGCACAACGGAAATCATGAGTGAATTACCATGATGAGGCGCAAATGATCTCCAGATTCTCAGTATCCTGCAGAGACAAGCAAGGGGTCACGCGGTTAGCGCCGACGGTGTCATTAAGAGCTGATAGGATATTATCCGTAGTGAGCCACCTAGAACGAGAAATCAAATCTACCCCAGCACCAATGGGCTTCACTCAGGCTCGGTGTACAATGGCATTAATTGACTCCTTGACTACCGTGCCCACTTGTGAATGTCATCTAGCTGTACGCCCGGTAGTAGTTCGTCGCCTTCGAAGATTGGGAGATCCCGCCTGGCTTGACGGGACTCTAGCGATGAACTTTTACCTTAGACGCCAACCGTGATCGCTTCCGGAAAAGAGTACTATTTGATTGGTGAGCGAATGGCCCCTGTTACGCGGGTCCCCATTTCCGGTGCGACAGTTGCTATGGAATATATCTTGGGGAAATTTCCCAATACCGGCCAAAGCCGGTAACTCCTACTTTAGATCAGCCGGCGACCGCCGTCGGTACGGCACTACTATTAGCAGCTATAACCGTGCGTGAGAATATATAAAGGTGCGAAAAGAGACGTTCGTGGGTTGAAGCTCACCTCATACGCTTGCGGTGTGATTATAGTATCCGAACAAGTACGTAACCAAAGTTCTGACTACAAGTAACACGGTGGTAATGTCTAGCCGACACCAGTACTCCCCTAGCGATTGCCCACTGTTCTGTACGACCTTCGGACAGTTCGACGGAGACAGGCGTCACTTACTAGTGTAGTCTGTATTTTGGTTCGAATACCGCTTACCAATTATTTGTCGGTTCATACGTGACGATAGCAGGGCGCAGCCCGTATTCAGTACATATGTTGAGGCACTGAATATTGTCTATAAACCGGTTTAACATTACCTTTTGTCAGGAGACCCAAGCAACAACGGAGTCGGGCTCCGATAACGCGCGGTCGTGACGATAGCAGGGCGCAGCCCGTATTCAGTACATATGTTGAGGCACTGAATATTGTCTATAAACCGGTTTAACATTACCTTTTGTCAGGAGACCCAAGCAACAACGGAGTCGGGCTCCGATAACGCGCGGTTGTACGAGTTCACGCTTTAGCATGAGACGCGTTGGTAAGCGCGAGGGTAGGCGGGCCAGATCACCGCCTACGTTAGGCGCTTCCGACTTGCCATAGCTATACAACTATTACGACTTCCCTGGAAGCTGGCCGTTCGTATTTTTCTCTCAACGATTGGGTCCCCCGCATCTCCTCTCTGCGCCCCTAAAACGGCTTCAGGCCTTAATAAGCGCCTCTTTGGTAATTCGTTCTTCACCCAGGCATATGAGCAGAGACCGCGTGGGGTGCAAATACGTACTTAGGGTGTCTTTGGAGCGTCTACCGCAGAATAAGGACACCAAAGATCGGTGGGAGCATATTTCATCATTACCGGAGCCATGCACTTTCTTCTTTCATACATGAAAATTTCCTTACGGTAGAAATCTGTCTCCTCGAGTTCTCAACAGATGTATTAGCGCCGAACGAGTGACGGGGAGTTCAGCTCGAAGTAGGAGCACAATCCGTGCCTCGATAACCAGTAAGATAAAAACAGCAGGCCCGGACTGAGACGGGGGCCATAATATCATTGAGCGTAACTGTACTCTGATTTCCATTGGAGTACGACTTTCTAACTCCCGGCTCGGGGATCACTATCGAATCGCCTAGGTGTGGTGGCGGATGGATTATATTTCCAGGTACTACTAACGACTTCAGGAAACGGCGTCGATTAATAAGTGACCGATCTGATGCCCTTCCGAATGGTTAATCGCCCATAGTAACGCAGGGCGTAAACCTTGGGAACAGCCATGTTCCTCCCTAGGTTTGTACCTTCACAGAGCACAGGCGATTCTAGGGTCCGGCCATCAAGTGTTAGACCAACGCGAAATAGTACCGCGCCTTACACCCCTCCGCTTTGTCTTATGGCAGCCTGCTCATTGCTACGCCAAGCGACGTACATCGTACACAACCAAGAAGAATGTGCAAAGTTTTAACATACTGGCCTGAGATACAACTAGGGATCAATGAAGCAGCACGTCTGGACATGTAGCAGATCATCCGGCTGGATCTGGACATTAGCCTACTGGCCCGTGAAAAACCTTAGGTCTAACCTTGGACGTGTACACGTCCTCGTGTAGCAGGCGAGAGGGAGGCTATGCAGATAAAATTTGGGGCTGTCCGCAGAGCCTCTCGCTTGCAATCATCCCGCATCACCTCTGTGATCAAGGCCAGGTTGGTTCAGTTCAGTTGAAGTTAGTCTGCGAGGGTGCACTTCGGACTTTCAAGTTCATTACAATTAGAAGTAAATTCAGTTGGTGGTGTGAGCCCTGTGCGTGCTACCCACTCCTTTAATACCGGAAGCTGTCTAGTCAGTCAAAAGATACACTCGGGGCCAGAGGGGTGCGTTGAACACCGAGACGCGCTCTATAGTTCCAACCGAGTACGGAAACAGTCGACTGGATGGATATTTCTGCGAACTCGTAAGCTAGAATTCTGACTACTCCCCCCCGAGCGCATACACATGCAAAGTGCGTAAAGCTGGAAAGATCCTGCGTAAACAGGCCTGCAATCCCAGCCAACTTACCAGAACGGCGGTTCGCGTCGGAGATCGCCGCCCCGAACATCGTGCCTCAATTGCGACAGTCCCGGAGGTTCTAGATCCCGAACATGCGTGCCCAACTTCCACCGCTGGCCTAGCCCGAGTCGCGTGTTAATTCCAAAAAGCGACACAGCTCGTTCTCCTACTGGAGGCCATTCGGCAACTACCCCTATTTAGCGTCTGGATTCTAGGGCGAGGGCACCGTGGCAAAGGCTATGTAGAATCAATTTCATAAGAACGCGGGATGCCAGCCCCCGTCTCTTCGACCACTCACCTCCGACTAGCAGAACTTTTGTTGCATTCAATATGCTATGCAAGAATTGTAGGTGAATACGATAGAAATTTTAACGATCGACTGTGATCTGGTCCCGGTGGCCTAAGGCTCGGTCACTTATTCTCCTCGTTCCACGTGTTGGCCCGCCACTCCTAACCCTTTCCTGAGATTACTTTATATCCGCAAGTTGTGACGGAAGCGTCATACCTAGGATTTGCGAGAAGACATATTACTGGGGTATTTTGCAACCCTCCCGGGTCTTGGGCACGTGCGACAGAACCAGGAGCGCGTGTGGCGCCCACGCTCCATGCACTACGGACCATATATAGCTCTATTCGGCATAATGGTTATAAAAGAGGGATAAAGAGGTAGTGGGGCATGAGGCACTGAGCTCGGCTGAAGTGAGCGCACATTTCCATGGTATTTTGCTGCCCAGTGAGCTTTCATGCATTCGATCGATCGGACGATAATGTCCTCGTCGATGATGATACGAGTATCAGGAAACAATCATAAGATAAAGTTCATGAGGGGCATGCACACTCCCCTCCACGAATAAGAAACAATCCCAACCACCAACCTCCGTGGAACCAAGAAGGGCCTGACCATTGTTCTTACCCGTTGGCCCTGTAATCGCGGATCTTTGAGCGACTCCGCACTGGCTGCTGGTCAGACTCGAACTCTTTGCGGGTACTTGCGGTGAGGAAGAAGATCCATCCACTGACTTCTCGTATTCAGACAATACCGGTCAATGAGTTGGTTTCACATCGAAGATGCGGAGGGTAGATTTAGGTTTGGTGCACACGCCGACCTCGGCGCAACTCGCAATACCTCGAAAGGTCTCATGCATGTCGGGATCCTGTGCCATTGTCACAGCTTGAAGACTTCCGCGTGAAATTGCAAACTGGGAAACCTACCTGAATTAGGGTGGCACCAGCGCCCACTCTTGGCCACTACGTCTTTATATAACAACAATGGAAACACATTTGCCTGTCCGTCAGCAAGTGGCTGCCTTACTCATAGCGCACGAAGACTAGAAGTCCTTAGATACTTATAGCCGTAGGGTCACGACGCTGCCCTTATACTTTAGCAAGATGCACCTTATCAGAGTTTCCGGCTGCCCCGGCATGCCTACATCGCCCTACAAAAAGTCAGATGACCCTTACACAATGGCACTCATAATATGAAAGGGACTCTATTGGAAGTCTAAGTGCGACAACGAGTCAAGTTGGAGAAATGGGACCGGTGTCATCTTATGACTCCACACCTCGTCGTGACCACAGAGCAATCGGTGGAAACGTCAACTGAATCAAACCCTTAAACGACCCGGGTTATTGATAGAAACCCAACCATTCAACTCCATAGAGGCTGCGGCGGTCGGAATTTTAATGACACATCAACAGCTTTCCCCACTTCCAGAGTAGCCAGCTCGAGTTGTATGCCTAGACACCGGTGGTCTCGAAAGGTGTTGAAAACCGGCTTGGCAGTTTCCCATAACGAATAACCTTCTAAAAGACATCGGTCCCTTGTGAAGGGGCCAGCGAGTCTAGTCTCACGCGCCAGAGTCCTTTTCTAGGTAGTACATTTAAATTCGGCTGTTATTTCTAGGACTTCAATTAAACTGGGTCAGAGCATCTACGAAGCTTACGTACACGTGGTGAAACGGATACTATATGCAAATCCCGCCCTCGCTGAGCCTTGCAAGAAACGAGCTAGTAGTTGATGGATTGTCTCCGATTGGCGTGCCTACGAATCGCGACCACGCGTTCTGAGAGATAACCCAGTAGCAACTGCAGCTCGCTCATCACCCTAGTAAGTATAAACGCCTACCAGCGGTGCGAACGAAACCCACCCAGTAGCAAACGGAAACATCCGCTCAACTCGCCTGCTAGAACCACGTATCTTTAGTTACCCGGAGGGTTAGTGGTAGTCCCAATAGACTAGGTGGATTCGAGGCCCACCCATGGATGACTATGGCCGACTAGGCCTAAAGAACGCGACGTCGACGTGGGAGGTCTCCTTAACAGCCCCCGTCGCCGGTGATGTCTACATTAATAGGTAGTTAGATTGAGATCCCGATGGCTTAGTTCCGTACATACAACCACAACCGACCAGGTTATCCCATCACTTGAACGCGGTAGTACAATACCCCCACAAGGAAAAAAGATGTCTAGGTCTCCGCCCGATGTCCGAAGGTGGCAATTAGTATCTAAAGGTATAGTCTCCATAGCAGAATGTGTTAGCACCGGATGACCGAGGTCCGAGAGCAGCGCAGTCACTCGTTAATAAGAACGGAGTACCACGCCGGAGCAAGTAGTGTACAGAACACATTATCGGCATGAAGTCCTCTGTTTTTGCATGCACGGTCTCTCCATTTATGTTGTCTCCGGATAGCCGAGTGATCAAAAGAGAAAGGAACAGTCCTCCACCTACTGGTTGTCGCAGTACCCACCCCGGGTGCGAAAATCACAGGCGCTCATGCCGGTACTAAGATTTCAGTCTGCCTCTTCTTAGTTCATCGGCATTGTTAACAAGTTAACCCCGGCGGTTGCTGTGGAAAATCGCCTAGCTTACCGAGATGACTTACAGAAGTGTCATACCTAACAAATCTTACGCAAATTCTGTGACGCCCGCTGGAGCCTGGCGACCAATACGAGTGGAGGACTCTGCGCCAGCTCTAATACGACTCGCTTAGTTAACCTCCTATAATCCATCGGTGATAGCACACACCGCATAGCATTAGCCTAAGTTCTCCGCATCTCCAGGGTGTCAAAGGGTTTGATATTGTGCTGAGTATGTGCTGATGTGAGTATATTTATGCTAATTGGCTCTTCTCTAGGCGCGTTCCGGTCCAAGACCGACTTTTTCACTTGTAAGTAACCGTATATCCGACAGGTGACGATCCCCGGTTGAACCCTGTCCGGGGCACGGCGAATGCGCAAACGATCGCTCTGCTCACCGAACCTAAGGCGATCTTCCTAGAGGCAATCTGGTACTGACTCTACCCGGTTCGATAGCCCGCGCTAGTCAAAGTGGAGATTGTTTGCACGATTTGCCCTTCAGTACCAATTATTGAGCTACGCGGTGATTCCTGCGCATGGGTAGGCGGCTTCCGGCTCTTAGTCTACATAAAAAGCATACATTACGGATGCTAGCTATTCTACCCTAACTCTCGTCGTCAATACTAAATGTTTAACTGGAGGCGCAGTTAGTTTCACTCTTCCTGTAATTTAGGATTTCTATCCGGATTGAGGTGGTCATCCCGGGCGCAGGATTGTTAGAACTGAGTAAAATTCAACACGGCGCGCAAGAGGGCGTTAGACGGGGGACGGCATGCTCAGCGAAGTAAGATGGATTTATTCCATAGGGCAAACGCTGAAGATACACTAAGGACGTCGGTTGCCTAGGTCTCCGAGGCTCCAGCTCCACACCCCGGGCTTCGGTCTCTCACGTCCGGATCACCTGGCAATTTCGAGTCCATGGCCTACACGCTCAGTCATTATTCGGGAACTGGCACACTTAATATCTCCCTCCGGTTACATACAATATTTGAGAGGCTGATGCCTGGTGAGAGCGGTAGACGTTGTTGCTCGACCATATCCGAGGCACGACTCCGACGCGAAGACACCGCTCCTCGACCAGCTCTTGCCACCCTTCCAGTCACTAGACTTCGGGGCGGATGAGTCGTTAGTGAAATTCATGATGGCTACTCTCTGAGTTCCGTGCCCTATCGTCTAGATCAGGATCGAAGACCCCGCGTTTTTGTATAGTCAAAAAACAATGCTATTTTGATGCATGCCGGATGTGATGGGCACCGACTCTATACAAAGACCTGTATTTGTTGCGCTGAAAGAAACTGTGTATGTTGAACAGCTCTCTGGCCTTAGGCATATTTTTGGAAGGAGTGCTGGGAGATAAAGAGCCGTGCACGATAACCCCATAAATAGAGTTTAGAGGTAAGTAGCGTGCGAATATGTCCTTGTTAGGGCGGGACGGTTAAGTTAGACTTCTTTCTATGCGTTAGACTGACGTCTGATAACCTACCGCTAAGGGCTGTGCCGTGAGTGAACTTGATCCCTATATAGTACACTGATAAGTAAGCCCTGAATGTCCGCACAGTTTGCCGAGTATCTGCGCGGCCGAAATGTCGGGCCAACCACTTGACTCATTGACCAGTGTGTTTACAACTGATTGATCCCTTCCCTTCGACAATTGGTTACCGAAGGCTCTT'
q = 'AGCGATCTAGGTGGGTTGGTGTGGATGTCATTGCAAGAAAGAGCCGGAGCCAGACCTATTCCACTGGACCAACCGATGCTAGCACTCTTACTACGAAAAATAGCATGACCTATAAGTGTGCAATCTAATATTCCGTAAATTGAATCAATGGGGAGTATTACGTACCAAGCATTTTGAACTTCGTCTGACACCCCCACGGGCCGCATTGTGATCTTGTGAGAGACTTCTGAGCTTGTAGCGTGACGTTTGACCTCTGTTTATCGCCGCCTATGGTGGTAACACTCCTAACTTCTGGGTTGGTCGGGAGCGGTCCGGGACCTACCGTGTGGGGGCTATGCTCCATCGTTCTTCTTTTATCGCTAAGGTGGGGTTCCAAGGCGACACCCCACGAATATTTCCCTACTGTCTACTCGTTGTCGCAGTGGCCAGCAGTAGGCGCTTTATACCATATAACATATGCTTAATGGAATTAGTATCGAACCTCCACGATGGTGAGTCGGCCATCGATGTACGCTTCCTGAGGAGCCAAGGAAGAGATCACCAGCTCCGGCTAAGCGCGGAACATCCACACGATTTGTGCCATGCGGTTAAGTCACACCCTCGGTCTTACTACCGATCTACTTTCCGCACGTTGCCCTTCAAACCAAACCGACAAGGACCCTCGTTCCAGGGGGCTTGGCATAAGTAATGTTTAACTTTCCAACCATTGCCTGGTGGAACGCTAATCTTGCCTGCTCAGTTACTAAGTCTTTCCGCCAACTACTGGCAAACTGTCGGAACGTCTTGGCAGAACACGGCGGGTAAAAACGCGTGCCTATCGTCTCCGCAGCTACCTTATGCTATTTTTGATCAGTGGAGTTGCAGTTGCCTCAAGATTCTTAAAACCGTCCATTAAACAATAATCTTGCTAGGACGTTAATATGCCAACGAATACGTCGGTTCGGCATGTCTCGAATTAGGAGGCAACTCTCATGTTTCGTGATATTAGGTGTCATTAAGAGCTGATAGGATATTATCCGTAGTGAGCCACCTAGAACGAGAAATCAAATCTACCCCAGCACCAATGGGCTTCACTCAGGCTCGGTGTACAATGGCATTAATTGACTCCTTGACTACCGTGCCCACTTGTGAATGTCATCTAGCTGTACGCCCGGTAGTAGTTCGTCGCCTTCGAAGATTGGGAGATCCCGCCTGGCTTGACGGGACTCTAGCGATGAACTTTTACCTTAGACGCCAACCGTGATCGCTTCCGGAAAAGAGTACTATTTGATTGGTGAGCGAATGGCCCCTGTTACGCGGGTCCCCATTTCCGGTGCGACAGTTGCTATGGAATATATCTTGGGGAAATTTCCCAATACCGGCCAAAGCCGGTAACTCCTACTTTAGATCAGCCGGCGACCGCCGTCGGTACGGCACTACTATTAGCAGCTATAACCGTGCGTGAGAATATATAAAGGTGCGAAAAGAGACGTTCGTGGGTTGAAGCTCACCTCATACGCTTGCGGTGTGATTATAGTATCCGAACAAGTACGTAACCAAAGTTCTGACTACAAGTAACACGGTGGTAATGTCTAGCCGACACCAGTACTCCCCTAGCGATTGCCCACTGTTCTGTACGACCTTCGGACAGTTCGACGGAGACAGGCGTCACTTACTAGTGTAGTCTGTATTTTGGTTCGAATACCGCTTACCAATTATTTGTCGGTTCATACGTGACGATAGCAGGGCGCAGCCCGTATTCAGTACATATGTTGAGGCACTGAATATTGTCTATAAACCGGTTTAACATTACCTTTTGTCAGGAGACCCAAGCAACAACGGAGTCGGGCTCCGATAACGCGCGGTTGTACGAGTTCACGCTTTAGCATGAGACGCGTTGGTAAGCGCGAGGGTAGGCGGGCCAGATCACCGCCTACGTTAGGCGCTTCCGACTTGCCATAGCTATACAACTATTACGACTTCCCTGGAAGCTGGCCGTTCGTATTTTTCTCTCAACGATTGGGTCCCCCGCATCTCCTCTCTGCGCCCCTAAAACGGCTTCAGGCCTTAATAAGCGCCTCTTTGGTAATTCGTTCTTCACCCAGGCATATGAGCAGAGACCGCGTGGGGTGCAAATACGTACTTAGGGTGTCTTTGGAGCGTCTACCGCAGAATAAGGACACCAAAGATCGGTGGGAGCATATTTCATCATTACCGGAGCCATGAGTCTATCTGGGTTAGTCGTCTAGGTATTTTCCGTAGCGTTTGGTTTCTGAGGACGTCGCTCCGTACATAGACCTACGTCAAGAGCGGCCAACCTGCTTCTTTAATATAACTCTGAGAACCTTCAGTACCCGCTTCACATTAGAATTAAAATCACAGATGCTATCATAGCCTTCATAAGATAAAGTTCATGAGGGGCATGCACACTCCCCTCCACGAATAAGAAACAATCCCAACCACCAACCTCCGTGGAACCAAGAAGGGCCTGACCATTGTTCTTACCCGTTGGCCCTGTAATCGCGGATCTTTGAGCGACTCCGCACTGGCTGCTGGTCAGACTCGAACTCTTTGCGGGTACTTGCGGTGAGGAAGAAGATCCATCCACTGACTTCTCGTATTCAGACAATACCGGTCAATGAGTTGGTTTCACATCGAAGATGCGGAGGGTAGATTTAGGTTTGGTGCACACGCCGACCTCGGCGCAACTCGCAATACCTCGAAAGGTCTCATGCATGTCGGGATCCTGTGCCATTGTCACAGCTTGAAGACTTCCGCGTGAAATTGCAAACTGGGAAACCTACCTGAATTAGGGTGGCACCAGCGCCCACTCTTGGCCACTACGTCTTTATATAACAACAATGGAAACACATTTGCCTGTCCGTCAGCAAGTGGCTGCCTTACTCATAGCGCACGAAGACTAGAAGTCCTTAGATACTTATAGCCGTAGGGTCACGACGCTGCCCTTATACTTTAGCAAGATGCACCTTATCAGAGTTTCCGGCTGCCCCGGCATGCCTACATCGCCCTACAAAAAGTCAGATGACCCTTACACAATGGCACTCATAATATGAAAGGGACTCTATTGGAAGTCTAAGTGCGACAACGAGTCAAGTTGGAGAAATGGGACCGGTGTCATCTTATGACTCCACACCTCGTCGTGACCACAGAGCAATCGGTGGAAACGTCAACTGAATCAAACCCTTAAACGACCCGGGTTATTGATAGAAACCCAACCATTCAACTCCATAGAGGCTGCGGCGGTCGGAATTTTAATGACACATCAACAGCTTTCCCCACTTCCAGAGTAGCCAGCTCGAGTTGTATGCCTAGACACCGGTGGTCTCGAAAGGTGTTGAAAACCGGCTTGGCAGTTTCCCGGCACTTTATCAGCCGCTAGCCAATCTCGTCGAACGCGATCACTATATGTGGTTTATTCATATAATCCTGATTAAATAACCATAAATATGTTACCCATGGCACAGAATGTCCACGGGCTTCCCATCCGCGATAAAATGCGCCGCCTACGTACCGTTGCTCCACTTTCGACGAGAATGCGAGTAGGTCGCTTTTCTCAGACGCTTCCTGCTTCGGAATGAGGGTCATTTGTCGTCAGAGAAACGAGTATAACAAAATATTGGATGATTTGTGACACGTGGGGTTAGAAAAAGAATCATTCTGTCGGCTGATTCCTAGAGTTTGTTTACCAAATCTACACAATTCGGGAGAAATGGGAGCCTCTGCCTCTAGATTCTATATTGCCTCAACTAGACCTTCGTCCTACCTCGAGAACGCTATAGACGACCCTGACTGTCTGAGTGGCGGAGTGCCCTGCATGGCGAGCCGCGCATGCATCGTTTAAGCGGCGTGTGATGAATCGACGTCAAGCCCGGGCAGTTATACTTATATCTGTCATGCACGGGCGCCTCGACTCCTCTGTGTAAGTTCGGGCCGCTGGCTATATCTAAGATGGTTCGGCGGTTGTATGGGGCCGCGTATTTCAGGCAGGTTACCTAGGAGACAGCATTCATCCATGATTACTTTGCCTACTTGAATAGGATCCCTGGGCTTAATTTACGGCTTGGTAAATTCACGATCGAGATTTCGACCGCGAATACGTAGATGATGCAAACGAGTGGGCATCACCGTGAAGGGGCTGAGTCGCCGACACGAATGCCACGACCCCTGCAAGTACAAAACTCCGGCTGAGTGGACAAAAAAAGTTTTGCAAGGATTACCTACTGTGATTCCTGGAGTTTCCTGTTGTTTGCATGCTCACGAGACCATGAGGAGTTATGTGTTCAAGGGAATTGGCTTATCATTGGCGAGTATGGTCTGGATTTTCTTGGGTTGGACATTGAAAACATTTGCTGGCGGGGAGCCCAACCTGTGTAGTTGTAGACGCGCAGCTACTTTAACGACACCCCTTACGCGCTCCTGTCGTGGCTTAAGCGCCAAGTTACCAGCCCATTCGGCATGCAATGCCTTCCGCGTGCTACTACACCAAAATTCGATCAGCTATGTGCTTCAAACGGCCCACTATACTGTAAATTAGATGCACTCTCCAGACAGAAAAAGACGACTGTAAACACTATGAGGAAACTAAGGAGTTATGCCCGACCTGACTTAGGGCTACGTAATTGAGCCTCTCTGAGCCCTTTTTATGAGGTCGCTGCGAGATTCGCCAACCAGTATCACCCGGTCTTTCCCCATCTTGCAAGTAATGAATCCAAAGAACCACGGTCGCCATCCCCCTTCTTCGGGTCGTCAGTGAAACAGGTTAGCCCTCTCTGCTTTCGGGGTTGGCAGTGTGCCCCACCATTATCTAGATAGCGAATTACTGGGTCACTCAGTGTGACGGTGTGGCGTGATCAACTCAACAAGCCTGCCTGCCCTCGGTTCTCGGTCGAGGACGAACGCCTTTATATGGGACCCGTAGTGTGGGGAGCTGCGTCGCCGGGGCTGAACTTCAGGGGTCCTATTAAAGATTAAGGTTGTTGATTTTGAGCCCTATACGGACTCAGACCTCTGCGTGTCGATCACAATCTGAGTCGGAGGTTTGGTGGTTATTTATTTAAGGACCCTTTCGTTTTCGACATTAGATTGCAATTTAGCTTTAATTCACCACCTGGCCTCATCTGTGAGGTAAGGTTTGTCTTGTGTTGAACCATAATGGTTCTCTACATACTGTAGGCCACATGACTAAGTAACATGTGACATTGGGGCTATGCAAGAAAAGGGATCATCCATCCTGATAGGGACGTTAAGCAGTGAGACCCCACAACCTGTCGTCACCCCATGCATACCAGGCGACGGCCTGGCACAACGGAAATCATGAGTGAATTACCATGATGAGGCGCAAATGATCTCCAGATTCTCAGTATCCTGCAGAGACAAGCAAGGGGTCACGCGGTTAGCGCCGACGCAAGCGATTGGATAATATTTATTTAAGATCCTCCTGTTCTTGAACAAGTATGACTGTCTTTGTTGGCTTACTGTGGAAGCCTTCTGCGACTGTATGCCAACGGTCCGCATGTTCTACGCGACCCCGGCTCGGCAAAACATTAATCCCCACTAACGTACCGGCACGCGTCGCGGAGCCGCATAACCGGAGAGCTCCTAGCATTAGGTCTCAAAGTGTTCGATTGTCAATCTCTAATAAGCTGGGCAACAGGATACCTATGCGGTGATTGGATAGCATATGGTTGTGTAGGAACAATTTGGCGAGTCCACCTCTCGCTAAGGCCGGGACGCTGTGACCTTATAATGAGGTCAGCGAGCGCCCTCATCTTTACTACTAAGGTCGCGTAACTCCAAATTCATAACTATATAAATACCAAAATCGTAGAGAGGTGGCGCCGTGGCGCCAATTGGTGCTCGACGTGTTATACCCCCGCTACAAATGGGTGTAGCAGCTCATTGCAAGGTCCTGACTCGGCAGCCCTGAGATGGGTCCCGTAAGCGTGTTCGTTTCGCTATTACACTACGTCTCCAGCAAAAGTCCGGCCATTAACCGCAAATGGCTGGTGACCCCATGGTACTAAAAACTACGTTGATGTCACGACCTAATTCAGGCGCAACCAGAGCCCTACATTCGCGTCTTAAATTTTGCGCATAGTGGCTAACACCCAATGTGCAAGGAGGAAATGCACGTGATCGGGCCGCCTAGTACGTACCCAATCAGAATTCAGCATCACTCTTGCCCGATGTTGGAAACTGAGGAAGGCAACCAGGGGGGACTCCGACGTGTGTCACCCTATAGTGAATCATGCTATACGATTGGCTCGACTGGGGGTGGATATCATAGGGCAGGAACACACAAAATTTTTAACAACCCAAAACGCCCTAGACCTTGACCTACGATGTGGTAGATTGTCATACTTGGATGACGACCTGCCGGCTTTTAGGATTGCTTGACGCGGCTGCGGGTATACTCTTTCTCAAAAGGGGCTGACATGCCTTTACTTACGTAAATGTAAACGTTCCATACCCAAGCTCTGCCCTGGTGGTGCCATGGCCACCTCATTGAGATTGTGTATCAGCTGATTTTTGGAGCGGAGTGCACAGTACAACAGCTTCGGCTTGGGACAAACTACGGTTTGAGTCAATTAACAATTCAATGGCGTTGATCTCCGTATCCCTTTCACTAGGGTCAATACCCGTTTGAACCACGTCGAAAACAATGATTAAAGATCTAAACCTCAGGGCTTCAGTCTTGAGGTAGTTTTCGAACGCCCCAGGTGGGACGTGAACAACCGCTAATTGCGCTATGCCCTAAGAGGTCTCCGCTAAGAGCTTACTGCTAATGGGGCCAAAATCACCGTGAACACAGTAGCCACCTGCACCCTCCAGAAATGTTACTTCATGGGAATTCAGGGCTCGGCCTGCGCTACGTATCTCCAACGAACACGCGGGTAACGGCGTTAGTAGAAGACTTGCTGTCACCATCGTCCACCCTGCTCCGCGTAGCTTTGAAGAACCCTCCGGTTACTTATTCCAGGTGCTGTCATGATGACGGCCTACAGCTTCTATGTGAGTCCCGTAGGACGGCGGCGCCCCTGCTCGCGTTAGGGAGCTCTGGGTTCGCCGGTATTTTAGCAGGCACTACTCACTGATGGGAGTGAGGGATTGGGGCCTCGTATCAACGTTAAGGAATCCTCGACCAAACCGTAGGTAAGTATAGCCGGGTGGGCCGTACGCGTTGGGTGGGGGCCACATATCCAGGCCGGCCAGAGCAGGCGAGTATGATTCGGAGATGGTTGGCGTTAGTGCCCCGACGGTATGACTCCCTGACGGAGGTGGCCGGTTGTCGTCCTAATAGTTAATGGGTCAGGAAGGAAGTAGTTTGCGATTATTTGATCCGCATTAACTTTATGCGATGAATAAAGAATTGGAGAATAATTATAAAGTGTTTATCCCTTGGCGACCAGAACGGTGTTAAGTTTGGACAGCGCCATACGCATCCGGGGGTGTTGGTGGAAAGCACCGCCGAGCTTCCAAGTGCAGAGACCCCTAATCTACGATCTCTGACTTCTTTGTCCGCTCGCAATCTTCGCAAGAGAGGGATTTGAGCGTTTTGCTACCACTGGATGAGGCCCGCGATCACAGGTCAAGCGCACTCTCCTCCATTCAGATACGAGCCCCGGTAGAAGAACTCCTATTTACGTTGCATCTTGCTATCATGTGTAGTCATTAGCCAAAGAATAGCGGGTTTTTAAGAACTGAGGGGCCCGGAAGACATACGAGGGAGATGTCTTGATCCTGACGTGAGAGCGCCCTATCCGAGAGAGATTCTTCCCCTGTGGAACAGTGTCAACCTCGCCCGTACGTAATTACTTCCCAGGAATAGATCGTAGACCACAAAGGCGGATTAGACTCTGCCGGTGGACCCGGAGACTTCCGAAACTACCCCTGATAGGCCATTAGCGCCATGAGGACGCGCGCTTGGGCGATCACACGTAGATTAGTAATGACATAAGACTTAGACTTAGGGCATTGGTGGGCGCAGAACGGTGATATCCCATCACAAAGACGGATGGTACTTAGCGTTGCCTAGGGACTTCCAGATCTGCATGACCCGTATACCGACGTGCTTAAGAAGCTGCCACGTATACTCGAATCTACAGCATATGCCCATTATGGAATCTGCCGAAAGTTGGATATTCCATTTTTTAACCTAACTATTGCTCCCTCGCTCTGGATGCAGCATATGTGTGAAGATGCCCGGTCGAAGGGAATCCCGTTCAGTCGCATTATGCTAAACAAGTATCATTGAGAGCACTACCAGCAATGAGAACTCGGGTTAACACGGTCACGGTGGACCGTCGTGATTCGCAAACATGTGGACGCTTAGCTCTCGCCGCTTCTAGGATAAAGGCGCTGAGGTAGGGAAAGGACAGCGTCTAACAAAGCCGAGTGCTTCTACGTATGAGGCCATCCTTACGACCACACATAATCGGAAGGCGCTCATGCCGGTACTAAGATTTCAGTCTGCCTCTTCTTAGTTCATCGGCATTGTTAACAAGTTAACCCCGGCGGTTGCTGTGGAAAATCGCCTAGCTTACCGAGATGACTTACAGAAGTGTCATACCTAACAAATCTTACGCAAATTCTGTGACGCCCGCTGGAGCCTGGCGACCAATACGAGTGGAGGACTCTGCGCCAGCTCTAATACGACTCGCTTAGTTAACCTCCTATAATCCATCGGTGATAGCACACACCGCATAGCATTAGCCTAAGTTCTCCGCATCTCCAGGGTGTCAAAGGGTTTGATATTGTGCTGAGTATGTGCTGATGTGAGTATATTTATGCTAATTGGCTCTTCTCTAGGCGCGTTCCGGTCCAAGACCGACTTTTTCACTTGTAAGTAACCGTATATCCGACAGGTGACGATCCCCGGTTGAACCCTGTCCGGGGCACGGCGAATGCGCAAACGATCGCTCTGCTCACCGAACCTAAGGCGATCTTCCTAGAGGCAATCTGGTACTGACTCTACCCGGTTCGATAGCCCGCGCTAGTCAAAGTGGAGATTGTTTGCACGATTTGCCCTTCAGTACCAATTATTGAGCTACGCGGTGATTCCTGCGCATGGGTAGGCGGCTTCCGGCTCTTAGTCTACATAAAAAGCATACATTACGGATGCTAGCTATTCTACCCTAACTCTCGTCGTCAATACTAAATGTTTAACTGGAGGCGCAGTTAGTTTCACTCTTCCTGTAATTTAGGATTTCTATCCGGATTGAGGTGGTCATCCCGGGCGCAGGATTGTTAGAACTGAGTAAAATTCAACACGGCGCGCAAGAGGGCGTTAGACGGGGGACGGCATGCTCAGCGAAGTAAGATGGATTTATTCCATAGGGCAAACGCTGAAGATACACTAAGGACGTCGGTTGCCTAGGTCTCCGAGGCTCCAGCTCCACACCCCGGGCTTCGGTCTCTCACGTCCGGATCATACCGTTCATTTGCCCCACAATACACGCAACTGGGACCAGAACCCTTATTGTAAGCGGATGGTCCAGCGGTCTGGTCTTTATACAAGTTAACCCCGGATAGCGCGCCATGCGTGACCGTCATCGGCGTCGGCGTATTCCTCGGAGATTAATCTAAGATGTACATCGGCTCGTGTTCTCGTCTCCGACCTCAACCGTAATCAAATCACAACGCCGGGCCGCGTGAGGGATACACAGAACCACGGTCCGTATCGTTCGATGGTGTCCGTGGGATAATTCGACGTTCTGTTTTTGTCATCGTGCTATTAGGCTAACGACAGTGTCTTTTCTGGATGTTCGCCGCATCGGTCCGCACGTAGGCCGCGGCTCAGAGGTTGAGAGGGACTAAGGTCTGGAGTCGTACAGTGACCCCCGTTTACTAAAAGTGCCAACTCTAGGATGGACAACAGACTACCAAGTTCAGAAAACCAAGAGGGAACCTGGAATCGTTGAGGGCCGGGGCCATGGGAGTCCTGCCGGAGTTTTCTAATAGATCAACCGAGGTGCGGAGCCGTTAGATCGATACCTGCTTTCTACAGGTTTCGAGATGAGTGCTGGCTAGAGCTTTTGGGCATCAGACTGAATCCCTGGTGAGTACGGCTCAGAGTAGGCCCTCTAACTGGAGTCACGTCAGACATTGAGATCATGCCTTGGCGAATAATAATACTGGGTGTCTCTGTCCTAGCTGACCATTAACTAGTGCTGTTGATAGGAATTTAAGTTTTACTTAAATGGCGTTTTGCGCTGAAGAAATACACGCGATTAGTTACTTGCAGAAGGAGTCGGACGTATAGACAGGCTGAAGAGCGATAAACCTACAACGTATTACTTGGTTAATATTAGACAAATCAGACCGCGAAACAGCATGGGGTCCTAAGCTTGTAAAGCCGGCTAACCGACGACCAAAGGCGATAGGGATCATTAGTACACCGTTACCGACCGATTCCCGCGCAGCAGAAACATATCGTCATGCCTGGACACTGAGCTAGTCGTCTCAGAAGGGCAAATGAGTCTTACGAAAGAGGAGGGCGGTTTTGTTCTACCAATCTCCCCCCCTCTCAGGGACCTCAGCTGGGGTTCCCCAAGGGCGCCCGTTCTGGCGATGCGACTTAATTTAGGCCTACGCTGGGCGAACGAGAGGAACCTTGGTGAAA'
w = ''

#print(len(v)-len(dna[0]), len(r), hamm_dist(v, r))
#takingabreak

#27 - Transitions and Transversions
names, dna = fn.fasta_process(fn.rp('tran'))
def trans_ratio(one, two):
    trnst = 0
    trnsv = 0
    listh = []
    for i in range(0, len(one)):
        if one[i] != two[i]:
            if ((one[i] == 'A') and (two[i] == 'G')) or ((one[i] == 'G') and (two[i] == 'A')) or ((one[i] == 'C') and (two[i] == 'T')) or ((one[i] == 'T') and (two[i] == 'C')):
                trnst += 1
            else: trnsv += 1
    print(trnst/trnsv)

#trans_ratio(dna[0],dna[1])

#28 - Longest increasing/decreasing subsequences - UNFINISHED

def lgis(name):
    with open(fn.rp(name), 'r') as file:
        data = file.read().split()
    mx, mn, linc, dinc = 0, 0, 0, 0
    data = data[1:]
    print(len(data))
    data = [int(i) for i in data]
    #data = [8, 9, 19, 13, 4, 17, 11, 10, 6, 18, 5, 2, 14, 3, 12, 16, 15, 7, 1]
    inc = [[data[0]]]
    dec = [[data[0]]]

    for i in range(1, len(data)):
        switch, tem, ind = False, 0, 0
        for j in range(0, len(inc)):
            if (data[i]) > inc[j][-1]:
                switch = True
                if len(inc[j]) > tem:
                    tem = len(inc[j])
                    ind = j
        if switch:
            temp = inc[ind].copy()
            temp.append(data[i])
            inc.append(temp)
        else: inc.append([data[i]])
        print(i, len(inc), len(dec), data[i], len(data), 'stats')
        switch, tem, ind = False, 0, 0
        for j in range(0, len(dec)):
            if (data[i]) < dec[j][-1]:
                switch = True
                if len(dec[j]) > tem:
                    tem = len(dec[j])
                    ind = j
        if switch:
            temp = dec[ind].copy()
            temp.append(data[i])
            dec.append(temp)
        else: dec.append([data[i]])
    temp1 = 0
    ind = []
    for i in inc:
        if len(i) > temp1: 
            temp1 = len(i) 
            ind = i
    print('inc', fn.listtostr(ind, True))
    temp1 = 0
    ind = []
    for i in dec:
        if len(i) > temp1: 
            temp1 = len(i) 
            ind = i
    print('dec', fn.listtostr(ind, True))
#lgis('lgis')

def lgis2(name):
    with open(fn.rp(name), 'r') as file:
        data = file.read().split()
    data = data[1:]
    data = [int(i) for i in data]
    print(len(data))
    data = [5, 1, 4, 2, 3]
    inc, dec = [],[]
    for i in data: inc.append([i]), dec.append([i])
    for i in range(0, len(data)):
        print('i', data[i])
        for j in range(0, i):
            if data[i] > inc[j][len(inc[j])-1]: inc[j].append(data[i])
            if data[i] < dec[j][len(dec[j])-1]: dec[j].append(data[i])
            print(i, j)
            print('inc', inc)
            print(data[i])
            print(inc[j])
            print(inc[j][len(inc[j])-1])
    temp1 = 0
    ind = []
    for i in inc:
        if len(i) > temp1: 
            temp1 = len(i) 
            ind = i
    print(fn.listtostr(ind))
    temp1 = 0
    ind = []
    for i in dec:
        if len(i) > temp1: 
            temp1 = len(i) 
            ind = i
    print(fn.listtostr(ind))

def lgis3(name):
    with open(fn.rp(name), 'r') as file:
        data = file.read().split()
    mx, mn = data[0], 1
    data = data[1:]
    data = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
    data = [[int(i)] for i in data]
    temp = data.copy()
    for i in range(0, len(data)):
        for j in range(0, i):
            if data[i][0] > temp[j][len(temp[j])-1]:
                temp[j].append(data[i][0])
                #print(temp[0], data[0])
        temp.append(data[i])
    print(temp)
    print(fn.listtostr(fn.rem_dup(fn.rem_shorts(temp))[0], True))
    # print(data)
    with open(fn.rp(name), 'r') as file:
        data = file.read().split()
    mx, mn = data[0], 1
    data = data[1:]
    data = [0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15]
    data = [[int(i)] for i in data]
    dunker = data.copy()
    for o in range(0, len(data)):
        for p in range(0, o):
            if data[o][0] < dunker[p][len(dunker[p])-1]:
                dunker[p].append(data[o][0])
                dunker.append(dunker[p])
    print(dunker)
    print(fn.listtostr(fn.rem_dup(fn.rem_shorts(dunker))[0], True))
#lgis3('lgis')


#29 - Enumerating k-mers Lexicographically
    #basically all possible combinations of a string of letters, sorted alphabetically
alph = ['A','B','C','D','E','F','G','H','I','J']

def string_combs(lis, n):
    base = [[]]
    count = 0
    tot = len(lis)**n
    for i in range(0, n):
        temp = []
        for j in range(0, len(base)):
            for k in range(0, len(base[j])+1):
                for l in lis:
                    count += 1
                    temp2 = base[j].copy()
                    temp2.insert(k, l)
                    temp.append(temp2)
        temp = fn.rem_dup(temp)
        base = temp
        
    base.sort()
    # fl = open('lexf.txt', 'w')
    # for b in base:
    #     fl.write(fn.listtostr(b, False)+'\n')
    # fl.close()
    return base
#string_combs(alph, 2)

#30 - Introduction to Random Strings

def chance_gc_content(string, array):
    retarray = []
    for i in array:
        gc = i/2
        at = (1 - i)/2
        tot = 1
        for j in string:
            if (j == 'A') or (j == 'T'): tot *= at
            if (j == 'G') or (j == 'C'): tot *= gc
        retarray.append(round(math.log(tot, 10), 3))
    print(fn.listtostr(retarray, True))

#31 - Perfect Matchings and RNA Secondary Structure
def numberOfPerfectMatchings(name):
    names, dna = fn.fasta_process(fn.rp(name))
    a, c, g, t, u = nucleotide_count(dna[0])
    print(a, u, c, g)
    print(math.factorial(a))
    print(math.factorial(c))
    print(math.factorial(a)*math.factorial(g))

#34 - Completing a Tree
with open(fn.rp('tree'), 'r') as file:
        data = file.read().split('\n')
data = data[1:]
data = [i.split() for i in data]
data = [[int(i) for i in j] for j in data]

def minEdgesForCompleteTree(data):
    [data[i].append(i) for i in range(0, len(data))]
    data = data[:-1]
    print(data, len(data))
    for i in range(len(data)):
        #print(i)
        i0, i1 = data[i][0], data[i][1]
        for j in range(i+1, len(data)):
            # print(data[j])
            j0, j1 = data[j][0], data[j][1]
            if (j0 == i0) or (j0 == i1) or (j1 == i0) or (j1 == i1):
                data[j][2] = data[i][2]
    ret = []
    [ret.append(k[2]) for k in data]
    print(len(ret), 'len ret')
    print(fn.rem_dup(ret))
    print(len(fn.rem_dup(ret)))
    return data

def grabber(lis, num):
    temp = []
    for i in lis:
        if i[2] == num:
            temp.append(i)
    print(temp)

def kmer_composition(data, n):
    combs = string_combs(['A','C','G','T'],n)
    arr = [0]*len(combs)
    for i in range(0, len(combs)):
        mer = fn.listtostr(combs[i], False)
        for j in range(0, len(data)-3):
            # print(data[j:j+4], mer)
            if data[j:j+4] == mer:
                # print('trigged')
                arr[i] += 1
    print(fn.listtostr(arr, True))
names, dna = fn.fasta_process(fn.rp('kmer'))
kmer_composition(dna[0], 4)
# data = 'abcdefgh'
# for i in range(0, len(data)-3):
#     print(data[i:i+4])

