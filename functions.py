import requests as rq

dict = {
    'UUU': 'F','CUU': 'L','AUU': 'I','GUU': 'V',
    'UUC': 'F','CUC': 'L','AUC': 'I','GUC': 'V',
    'UUA': 'L','CUA': 'L','AUA': 'I','GUA': 'V',
    'UUG': 'L','CUG': 'L','AUG': 'M','GUG': 'V',
    'UCU': 'S','CCU': 'P','ACU': 'T','GCU': 'A',
    'UCC': 'S','CCC': 'P','ACC': 'T','GCC': 'A',
    'UCA': 'S','CCA': 'P','ACA': 'T','GCA': 'A',
    'UCG': 'S','CCG': 'P','ACG': 'T','GCG': 'A',
    'UAU': 'Y','CAU': 'H','AAU': 'N','GAU': 'D',
    'UAC': 'Y','CAC': 'H','AAC': 'N','GAC': 'D',
    'UAA': 'Stop','CAA': 'Q','AAA': 'K','GAA': 'E',
    'UAG': 'Stop','CAG': 'Q','AAG': 'K','GAG': 'E',
    'UGU': 'C','CGU': 'R','AGU': 'S','GGU': 'G',
    'UGC': 'C','CGC': 'R','AGC': 'S','GGC': 'G',
    'UGA': 'Stop','CGA': 'R','AGA': 'R','GGA': 'G',
    'UGG': 'W','CGG': 'R','AGG': 'R','GGG': 'G', 
}



def process(response):
    if response.status_code == 200:
        # Process the response data
        data = response.json()
        return data
    else:
        print(f"Error: {response.status_code}")
        #print(response.headers)

base_url = 'http://www.uniprot.org/uniprot/'
def rp(name):
    return f'rosalind-problems/data_files/rosalind_{name}.txt'

def fasta_process(path):
    with open(path, 'r') as file:
        data = file.read()
    data = data.replace('\n', '')
    locs, names, dna = [], [], []
    for i in range(0, len(data)):
        if data[i] == '>':
            locs.append(i)
            names.append(data[i+1:i+14])
    locs.append(len(data))
    for i in range(0, len(locs)-1):
        dna.append(data[locs[i]+14:locs[i+1]])
    return names, dna

def rosa_process(name):
    with open(f'rosalind-problems/data_files/rosalind_{name}.txt', 'r') as file:
        data = file.read()
    data = data.replace('\n', '')

def listtostr(list, switch):
    output = ''
    if switch:
        for j in list: output += str(j) + ' '
    else:
        for j in list: output += str(j) + ''
    return output

def printlist(list):
    for i in list: print(i)

def rna_comp(rna):
    return rna.replace('A', 'u').replace('U', 'a').replace('C', 'g').replace('G', 'c').upper()

def rna_rev_comp(rna):
    return rna.replace('A', 'u').replace('U', 'a').replace('C', 'g').replace('G', 'c').upper()[::-1]

def dna_comp(dna):
    return dna.replace('A', 't').replace('T', 'a').replace('C', 'g').replace('G', 'c').upper()

def dna_rev_comp(dna):
    return dna.replace('A', 't').replace('T', 'a').replace('C', 'g').replace('G', 'c').upper()[::-1]

def rem_dup(self):
    retlist = []
    switch = True
    for i in range(0, len(self)):
        for j in range(0, len(self)):
            if self[i] == self[j] and i > j:
                switch = False
                break
            else: switch = True
        if switch == True: retlist.append(self[i])
    return retlist

rna = 'AUGAUCUAUGACUACACAAGAUGUCGCAGACCAAACUUGUCCAUACAUGUAAACGCGUUUGCUGCUGCCCAGUUCUCAGGUAGCAAUUUCACGCAGACAGUUAAAGACACAACUGCCUAUCUAUGCCGAAUGGAGAACAGGAUCCUAGCAGUAGCCAGAUAUGCACGGUGCCUGGCCACUUCUAUGUCCUGGGAAAUGGAUCAAUACCCGACGCCAACAGAGGCUGAUAAACGGAGUGCGUAUACUACUGCCCAACAGACCAAUGACCAGGAAGUUGCCGAUGACCAGAGAGUUGCGAAAUGGGACAUUAGGCACUUUACAUUACCCCCAGAAUUGGUUGAAGGACGGGUGAGACGGGGCGAAUUGCUACCCGUGGUACGGGUCUUCCGGCAGUUAGGCAGAGUGGUGUGGAUGUGCAGAAGGUUCCCUGUUAGAUCGCGAGCCAGCACUACGCUCGUUACCUUGAUGUCAGGGUUUCAUGCGCUGAACACCUAUAUCCCUCCAAACCUCCCGAUCUUGAGGGUUGAUGCCCCCAAAUGGUUAAAGACCGAGACUAGUGGUUCCAGCCACUACCUAAAGAUUAUCCGGCGUCCCCACGGUGAAGGCAACAUCCAUUAUCGUGAAUUAGGGCAUACCCAAUGGGGCGUUUACUUUAAGCAAACUCUACACGCCUGCUCGAGGCGACUAGGUCGGUCCCCGCAUCGAAACCAAGAGCUUUCUCCCCUACCGCCCAGCCCUCGCGGGUUGUGCGGCCCCUUCGUAUUCGUCGCGGGUGUGCACGUGCAGAUUAAAUUGAGCCCCCCCGUCGCGAGACAGAGAAUGCGUCGCUCAGCGCACGUACUCUCAAGUGUUACCAAGAGUCCAUAUGUCAGAUAUUCGAACUCCAAAUUACGGAUCAGAAUAUCCUAUUCUGAAAGUGUACCCCAGAUAUCGACAGGUAUCCACUCGACGAGCGAUACGCUAAACCCACUUGCACCCGCGCUGGCCGGCGUUACCCCUUACCCUGGCCAAGCAGAUGCAAAUACAUCAUGUAGGCGAAUCGAGCUGAUCAACCAUGCCCCUUCCAUAUGCACAAGCAUAUUUGUGGUUCGUAUGACGCAUGGCGGGUCGGGGACCAUUCUAGAACCCCUACUACGCUUAAACGUGGCAGAUGUCACGUUUAAUAGUCUGUGGUUUGUACAAUGUCACAUGUUGUGUAAUUCAAGUCAGCCAUAUCCCUUUUGGUCGACUUACUCUCUUACCGCAUUAAAGUCUGGUUUCGGUCCCGGAUUACGACUAGCACCUGCAUAUUUGGCGCAGGAAGUCGAUUCCGUCCCUAGAUGUGCAAAAUGUACGUGUACCCUGCUGGAUAGCGGGCUCGAUUUCGUGCAGUCUCCGCAGUCGGUUACACGUCAGAGAUGUCGAAUAUACCAACGGAACCCUUUUGGGAAAUAUUACGGUAUCAAGUUGAAUCCCAUGUGCCCCUCUUGUCGGGCACAGAGAUCCCCGUUACCCUCCACCCAUCAGAGAACGCACUGUCAUUGCUGGCCAAGCAGGGUCGCAAGCAGGACAAAUUCCACGAACGAGCUGUUGGUGUCCUAUGGAAGUAAAUUAUUCUCCCCGAUAUGCACCCCUUCAGAGUGCUGGGAGAGCCCCAUUAUGUCUUGUAUAGUCAGUUGCUCGUAUGUUUACUUGCACCGGGUAAGGGAAUCAGGCAUUAAGCCCCUUUUGCGACCCAAGAGUCUCCGACUUCCUGCCACAAUAGGUCGUCGGCCCGCUUAUAUGUCAAAGCCCAGAGUAAGACUGUCUGGGAUGCCUUUCUGUCCCAUAGAGUUCGAGAGCCAGUUUUCCCUAAGCAUCAUCCUAAGAACCACUUCAAGGAUACGUUGGCAUAAACUAAAGUCUUCUGAAGUAGCAGAGUUGAAACAUAACCACUUUAUAAGCGGGCAUUAUCAACCCAUUUCCGUCAAACCGAGCAUCGUACUCGUCCAUGUCCUUCGACAGGAGACACCACGCCGACAACGUUGGCCGUCGGAAGAGGCUGGUACGGGUGCAUUACAAGGUCGCAUGGUACACGUUCUAGACUGCUCCUUAUCUAAAUUUCUGAUCUCUGCAUUUAAACGGUGCGGUCUUACACAUCCCGAGCUGCCAGCGACCACCAGUCUGUCCUACGGAUGCCCCUCUAUCGCGUUACUUCAAGGGACACAUAAGUCCACGAGUGAGCUGGGAAUGUACUACAACCGUAUGAACUCCUUUCUCAGAGAGGUAGGUCUACCGAGGAGGGUCUUCCAAGGUUCACCUCAUUCCGUGUUGAGGCAUAACGGAGUCGUGGUAUGUGAUUUAGACCCGGGGUUUAGGCCUCCGCCUGAGCCAACAGGCAUCUCUUUAGAGGAGCAUGCAAUUAAGAAUCCUGCACCGUGGUCGCGACAAAGCAAAGUACGGACACAAGGAAUAACUGAGCUUAUUGGUCAAGGGGCAACCUCUUGGGAGAAAAUGACCGACGCUAGCACAAGGAGUAGAUAUCGCCUCGUCCAUAAUUAUUACCGCGGGCUCAUGGAAUUAGUAGUGAAAGGGGGUGACCAAGUUGAACACAAGCCAGGCAGUUAUGCGAAAGGUGUUCGCAGAAUGGGUUUAGCAGGACGACCGACUAAUCCUCCGUGUGAGCGGGUUAUAGUCUGGAUAGGUGCUACGCUCAACUUUAUUCAUGAGGAGGGCGCGAUGUUGUCAGGACCGUCUAGGGCAUACUCUGAGGUGACUGUCAGACAUAGCGGAUCCCGCAUGGGGGGCUCAAUUCUUUAUGUGCUCCUAGGACGUGGGUCAAUAUUGCUGAGAACACUUACCUCCAUUACGGUGCAUGGGGGUGUAAAUAGACUAGCCAGCCCUUUCCUGAGUAUCUCAUUACCCAACCUUACCUUCCCGGAGGGGUGGGGAUGCCAGUUACUGCUCCUGCGUCGUAUGUCGAAAGAGACAACUGAACUGGUAUGCGAAACGGUAAGAGGUGAAACUCGUCCUUAUGGGAGACAGUCAAGGUGGACGCGUGCCCUAGGGCUAAUCAGAGAACUCUCCAGGGCGUGGGCGUUCGUCAAACAGCGAUCAAGCGCAAGAUAUCAAUACCUGCGAAAGGAGCUGAUGGAUCCUCCUACCUUAUUCAUCAUUCCCACAGAUGAAUCCAGUCGCGCCGACGUUUCGGUACCUGCUUCGCUGACAUCACCCUGUCGAAUCCAAUUGACUCCGAAUGGAGCACACGGAUUCCAUGAUAGUCACCCGAUCUCCAUAGGAUUAGUCGUAAUUUUGGGAUACACUCUUUUGCAGACGACUGAGAAAUAUCCUGGACGGCUGAUGACGAAUCCUGCUCAACUAAGCAUAUGCACACAGAGAGGACGCGCCCUGUGGUCAAACAGAGUGGGAAUACCGCAAGAGGCCCCAGGUGCGCUAGACAACCUAGCAAAUACAAUGACGGUUUCAAUAUGCCUAGUGCUAUAUGUGCCGGUAUGCUGCGUCUGGAAUCGGUUAAAGAAAAACCCGCACGCGCUGCCGCCUAUGGCCACGGAGGGAGUCAUCCCCUCCCACUCGGGCCAAGAACGAGGUAAGCAACACUCACAGAACUGCAGUCGGAGUACAGCGUACUGCGUAUGUCAGAUCCCGAGCGCAGCUGGUCUACGGCCUGGGGGUUCCUCCUGCCCAACAUGGCCAUAUACUGGAGCCGCCGCUCUGCGGAGCAUCCCGAUUUUUCAAUUAUGUCGGUACAGGUUGAUUCGGAAAUGCUCGGCGUUACACGACAAACCCAAAUCCUAUUGGUUACCGAAGAAGUCUAUAAACCUCAAAUCUCACAUUUCGGGUUGGUCGCUGCAAAAGCACCUGAGCUUAUUCCAGAGUGUAGUUCGACUGUACAAGAAACUAACUGUUAGGGCGAAACGUAAAGGGUCAAUGUUGUCCCUGUAUGGUACGGCCGUAUUCGUCAAAUUUCCACGAUCAUAUCGUUCGCCGUGGGUCUGGUUUAGAAGAUCUCGUCAGCUGACCUGUAAGCUUGAGCUUCCCAGAAACAGAUGCAUCCAAUGGUAUAGGUUGGUAGACAUGUUUGGGGUGCUACCGGACAUUGUUGCGUCCCAGGAGCGUGUAGUGGUCACGAUCAAACAGCUGUUACUAAAUACCUGGCGAAGUAGAGAACAGACAUACCAGAUAUCAGCGUGCGAACAGGUAUGCCAGCAGAAGAUGUCUGUCAAUCCGCAGUCGAAACUUCGCGUUGUAUCUCUGCCAGAGUCGAGAAAGGCGACAAGCCGUUUUCGUGUUGCGCAAAUGUGCUGCGUGAACUCGGUCUCAGCGAUGGCUUUGCUGUGCGCCUUUCUUCCCUUGGUGAUCAUGGAAGCGUGGCUUCUAAUCGAGCAUAACGCCAUGAAAGGAUCCGUGCUCAAGCGAAAAGUUCCUAGAUUGCUUUCUUCGCACAUGACGUGCAUGACAGCCUUAGCCCACCGCAGAGUCGCAGUCACUACAAUUGUAGAGACUGGUCUUUCGGUUAUGAUCGUAGCCGACAUCUUAUGGGGCCCAUGCAAGUCUGGUCCCCCAGUGCACCUCGAAACUCAGUUCACAGGAGACGCGGCUAAAUACUUUACGGGCGGGAGACUUGGAAAGGUGAAACCAAGAGCGCUUGUAUCCACACCGCUAGCAUGGGCCGCAGGUGGUUAUUAUUUACUGUUGAUGUUCACUAACGUUCUGCGCCAAGCGUGGAUCUCACCUAUGUACCGCUGGUACAUAGAGGCGCCCAAAAUGAAAACAUCUAUAUUAGAGUCUCACGGUACGGCUAAUCUUAUACUGAUAAUGAGAAUACCUAGAAACUCGCUUAACUUGUCGUGCCGGGUCACCCGACCGCCGUCCAGUGGCAGGUCCCCUACACCACUUGGGGGCGGGGUGUCUUUGCCAUCAAGAUUUUUACUCGAACAAUUUGCUGCUAACGGUAGAGUUGGAUCUCCCUUCUCUAAUUAUCUUAGAUAUCAUACUACGAGAUGCUUUGGGAUGCGCCACGCUUUACGCAGCCGCGGAUCCCAAGGGUUGUAUCCUGUGGAGGGCUUAAGAGAGGCCGCGUGGGCGUCACGAUCGCAGAGCGUCAGAGACCCAAGAGACCUUGCACCGGCAAUGCCCACACGUCUGCCCCCGUCGGUUAACCUGGGGUGUGCUACAUUGGUCAGUAGCGCGCACACCACACGGUCCAAGUAUGCCUAUUUAAAACGCGCAGCAACCCAGCCCAUCGGUUUUCGCAUUACUUUACGUUUGGUCGCAUGUGGACCAUUUGAUGAUAUCGCGACUCUAUUGAAAGAGUUAACCCCGACAUUUCACAGAGCUGGUCGUCGAGUGACAAGACGUGAACUUUCCGUGCCUUCCGGUAUAAGCUACGGUAACCCAUUUGGAGCGAUCCUGGUAGCUCACACAUUUUACUAUAAAAAAGGGAGUUCCCGUCUUAACUUCCAUAACCGCCGCUUGGGUCAAUCUAUUCUUUUGCAUGGAAUCUAUUGGUGUAUACUGUGGGAUGGUACGGCGGGGGCCCCGGGGCUGCACUCCUUACGCGGAAGAGUUCUGAGUUUUCCCCCGAACGGUCUAGGAGAGGCGACCCGCGGAUACUAUAUCGGCGGUGCUCGAAUGUCCGACGAGCUCAGAAAUCUCCCGAUCACUGGCAGUUUCUUUGCACCAUCGGAGUGUGACACUUUAAGGACGAGAUUUAGUGUUGUGAAGCGCGAAAAGAGCUUCAUUACACGUUUAAGUAUUCAGAGCGCGCUAGAGACUAGCACAUUAACAGCCUGUCGAUUGCUCCCGGGAUCCGUCUGCCCUGAUCCCGAUUGUGGAGUAUCCAAAGCAAGUCUGGAGGGCCCAAAUCCUAGGCUCUCACCUGAGAUAGUACGAUAUGAUCAGGUGCCCUGCUUAGUCCAAAUGGGGGUCACAGUGCUGAACAAUUGCGAUAAUAUUUACUUCAGCGUUUGGUAUAACUUCCGACCAGGCACGAUAGAAGAGGGUGGAACAAGAUUUCUAAGUAACCAGCCUCCACAGAUUUGGCAAUUAAACAGGAUACAACCUACACUUAGUUAUAUCGGGAUAAGAGAAGAGGAUACAGGCAUGUUACAGUGUUCAUUAGAAUGUCUGAUGCGUUCCGUGAGGUCUAUCAUGGUUAGGCCGUACUACGGAUGGUCGAUUUAUCUAAGUUAUCACUUAUGGGAAUCCUGCUGGGAAACUACCGCAUUAGGCCACGGAGGAUGGCGGGUAGGUGUUACCCACUGUGGAACUACCCUGCUAUAUUCUAUACUAUGUUCGAACGCUAUCUCCCUUUUGCUUGAGAUCCCUUCAUGGCAGCUGGAGUCUGACGAUGAGUUUCGACGUCUAACCUUUGAGUUCAUAGUUAUGUUUUCAGUCUGCCAUCCUCACGGAUAUGUAGAGAAUGUUAGAUGUAGUCCUUGCCCUGUAAGCAGAUGUUUGUCGAGCUCCGUCUUAUUACUUGUUAUCCUGUGCAUCGUUUCCUCGCAUCUCGGUCGAAACGGUUGGGGGAAAAAAGUCCCCUAUCUUCGGCCCGAAGUAGCUGACGGUACUUUUCUGUCUCGUUUCAUGGACAAUUCGUAUACAUACAUAUCUCCGUUUUACAUUCGUAACUCAAUGACCCAGGGUCGUGAGUUUAAACGUGUACGCUCCACGUGCUACAGAUGGUUCUUGGCCUGUAGUUGCAUUGAAUUAAUUGGUAUUAAGGCUCAGAGGAGUAGUAUCUCGAGAUGGACUUGGACAUGGGCCUACGAGUGUCGAGGAACUUGCCAUCUAUAUUAUUGUGCGCGUCGCCACGUGAAAUCACCUAGAUCAGUGCGCGUCAGCGACGUGAUCCACCAACAGACAUACGGCGGUUUAAGGCGCAAGGUCGUUUCAAUACAGAGUCUUCGUACUUGCCAUGGAGUCCCGUCCGGCGCUCGCGCGGAUGUAGCCAUUGGUCGUUCCAUGAUGCCACACAAAUCAUGUGCAUACGACCGGUAUACCCCUCCACCGGUGUCCCGGAAAGUACAAUCUAUAGGUGUAGUUAAUAGUCUUCACACACAGCUACGUUUUGCCGAUGGCUAUUUUUCUCGACGCUGGCUCGACUGUGGGCAAAUCUGGGUCGAAACCGGCAGGGGACUGUCUCGGUUGGCUGCUUACAAGCCAAUGCUACUGCAUGGCCACAGUAGAUCAGAAGGAUGCCGUCGGGCGAUAAUAAAAGGGACCACGAAGAUGAUAAAUCUAGCCGAGUCGGCUUUAUCGAGGAACGGGUUCAGCCAUUCGUUGACUCAUGCUACUUUCACAAACUGCGGAAAAGAUGCCUUUCGUGUCGGUCCAUGGUACGAUCUGCCUGAUAUCAACAGUGCGUGGAAUGCUAAGGUUUGCAUACUACCUGAUAUUCCAGGCCUUACUGGACUUCAAUGUCUUGACAGGUGUUGCCAGCUCUGGGAGCUAUACGUCGCUUUGGUGUCCCAGCCAUAUCACUAUUUUCGCUUGACUGAGUGCGCAAUUCUCAAAGCGCCACAGCGCCGUCUUACCCAUAUCUUCACAGUCCGCACAUGCGAGCGGUGUCAAGUAUACCAAAGUUAUGAUUUUGCGUCCAGUGUGUAUCUUGAUAAGGGAAGCGCGAGGCGUAAAUUGGGGCCCGCCCCUGCGUACCUGCAUCAGCCCAUGAGGUUAUGGCGGGCUGCGUGGGGACGAAAUGACAUCGGUUUCCCGGGAAGCGUGGUGGCCCACAAUGAUACCACGCUGUCUAAGAACAUCGCUUUGCGCCCAUCGAGAGCUGCAUGUAUUGAGCCCUAUAGAUGUCUCGGCAUAUGUCAAGCAGGAAAUACGAUAACGCCCUGCAGAACAUUCUGUACGCCAAGUCUCCGUAUGUUGGCUGUUACUCGUAACCAAGCUAAUGCUUGUUUAUUCCACAGUUCAUUGUCUGAUGAAGCUGAGAAUACUACCGACAGGGACACAACGUGUACUAGGGCGCCGACGUACCCUGGAACUAAGGGUGCCUUACGUCGGGACCAAGGCGCUCAAAGGCGAUACGGUUACGUAUUGCGCAGCUGGAUAGACAUUUAA'



def rna_prot(data):
    prot = ''
    i = 0
    switch = False
    while i < (len(data)-3):
        if data[i:i+3] == 'AUG':
            print('trigged', data[i:i+3], i)
            switch = True
        if (data[i:i+3] == 'UAG') or (data[i:i+3] == 'UAA') or (data[i:i+3] == 'UGA'):
            switch = False
            print(prot, 'end')
            return prot
        if switch:
            prot = prot + dict[data[i:i+3]]
            print(prot, i, data[i:i+3])
            i += 3
        else:
            i+=3

def rem_shorts(lis):
    temp = []
    num = 0
    for i in lis:
        if len(i) > num:
            num = len(i)
    for i in lis:
        if len(i) >= num:
            temp.append(i)
    return temp

def str_insert(pos, string, char):
    return string[:pos] + char + string[pos:]

def factorial(x):
    tot = 1
    for i in range(1, x+1):
        tot *= i
    return tot
